// generated by Fast Light User Interface Designer (fluid) version 1.0110

#include "AnalyzeCorrespondenceGUI.h"

void AnalyzeCorrespondenceGUI::cb_Load_i(Fl_Menu_*, void*) {
  this->HideGroups();
this->LoadPointFile();
}
void AnalyzeCorrespondenceGUI::cb_Load(Fl_Menu_* o, void* v) {
  ((AnalyzeCorrespondenceGUI*)(o->parent()->user_data()))->cb_Load_i(o,v);
}

void AnalyzeCorrespondenceGUI::cb_Load1_i(Fl_Menu_*, void*) {
  this->HideGroups();
this->LoadPCAShape();
}
void AnalyzeCorrespondenceGUI::cb_Load1(Fl_Menu_* o, void* v) {
  ((AnalyzeCorrespondenceGUI*)(o->parent()->user_data()))->cb_Load1_i(o,v);
}

void AnalyzeCorrespondenceGUI::cb_Load2_i(Fl_Menu_*, void*) {
  this->LoadScalars();
}
void AnalyzeCorrespondenceGUI::cb_Load2(Fl_Menu_* o, void* v) {
  ((AnalyzeCorrespondenceGUI*)(o->parent()->user_data()))->cb_Load2_i(o,v);
}

void AnalyzeCorrespondenceGUI::cb_Load3_i(Fl_Menu_*, void*) {
  this->HideGroups();
this->ViewMeanGroup->show();
this->ViewMeanGroup->label("Vector Field");
this->LoadVectorField();
}
void AnalyzeCorrespondenceGUI::cb_Load3(Fl_Menu_* o, void* v) {
  ((AnalyzeCorrespondenceGUI*)(o->parent()->user_data()))->cb_Load3_i(o,v);
}

void AnalyzeCorrespondenceGUI::cb_Write_i(Fl_Menu_*, void*) {
  this->WritePoints();
}
void AnalyzeCorrespondenceGUI::cb_Write(Fl_Menu_* o, void* v) {
  ((AnalyzeCorrespondenceGUI*)(o->parent()->user_data()))->cb_Write_i(o,v);
}

void AnalyzeCorrespondenceGUI::cb_Write1_i(Fl_Menu_*, void*) {
  this->WritePCALoadings();
}
void AnalyzeCorrespondenceGUI::cb_Write1(Fl_Menu_* o, void* v) {
  ((AnalyzeCorrespondenceGUI*)(o->parent()->user_data()))->cb_Write1_i(o,v);
}

void AnalyzeCorrespondenceGUI::cb_Point_i(Fl_Menu_*, void*) {
  this->HideGroups();
this->PointFileDiff();
}
void AnalyzeCorrespondenceGUI::cb_Point(Fl_Menu_* o, void* v) {
  ((AnalyzeCorrespondenceGUI*)(o->parent()->user_data()))->cb_Point_i(o,v);
}

void AnalyzeCorrespondenceGUI::cb_Exit_i(Fl_Menu_*, void*) {
  this->Quit();
}
void AnalyzeCorrespondenceGUI::cb_Exit(Fl_Menu_* o, void* v) {
  ((AnalyzeCorrespondenceGUI*)(o->parent()->user_data()))->cb_Exit_i(o,v);
}

void AnalyzeCorrespondenceGUI::cb_Samples_i(Fl_Menu_*, void*) {
  this->HideGroups();
this->ShowSpheres();
this->ViewSampleGroup->show();
this->DisplaySamples();
}
void AnalyzeCorrespondenceGUI::cb_Samples(Fl_Menu_* o, void* v) {
  ((AnalyzeCorrespondenceGUI*)(o->parent()->user_data()))->cb_Samples_i(o,v);
}

void AnalyzeCorrespondenceGUI::cb_Mean_i(Fl_Menu_*, void*) {
  this->HideGroups();
this->ShowSpheres();
this->DisplayMean(0);
this->ViewMeanGroup->show();
this->ViewMeanGroup->label("Sample Mean Shape");
}
void AnalyzeCorrespondenceGUI::cb_Mean(Fl_Menu_* o, void* v) {
  ((AnalyzeCorrespondenceGUI*)(o->parent()->user_data()))->cb_Mean_i(o,v);
}

void AnalyzeCorrespondenceGUI::cb_Median_i(Fl_Menu_*, void*) {
  this->HideGroups();
this->ShowSpheres();
this->ViewSampleGroup->show();
this->DisplayGroupMedian(-32);
}
void AnalyzeCorrespondenceGUI::cb_Median(Fl_Menu_* o, void* v) {
  ((AnalyzeCorrespondenceGUI*)(o->parent()->user_data()))->cb_Median_i(o,v);
}

void AnalyzeCorrespondenceGUI::cb_menuGroup1Mean_i(Fl_Menu_*, void*) {
  this->HideGroups();
this->ShowSpheres();
this->DisplayMean(1);
this->ViewMeanGroup->show();
this->ViewMeanGroup->label("Group 1 Mean");
}
void AnalyzeCorrespondenceGUI::cb_menuGroup1Mean(Fl_Menu_* o, void* v) {
  ((AnalyzeCorrespondenceGUI*)(o->parent()->user_data()))->cb_menuGroup1Mean_i(o,v);
}

void AnalyzeCorrespondenceGUI::cb_menuGroup1Median_i(Fl_Menu_*, void*) {
  this->HideGroups();
this->ShowSpheres();
this->ViewSampleGroup->show();
this->DisplayGroupMedian(1);
}
void AnalyzeCorrespondenceGUI::cb_menuGroup1Median(Fl_Menu_* o, void* v) {
  ((AnalyzeCorrespondenceGUI*)(o->parent()->user_data()))->cb_menuGroup1Median_i(o,v);
}

void AnalyzeCorrespondenceGUI::cb_menuGroup2Mean_i(Fl_Menu_*, void*) {
  this->HideGroups();
this->ShowSpheres();
this->DisplayMean(2);
this->ViewMeanGroup->show();
this->ViewMeanGroup->label("Group 2 Mean");
}
void AnalyzeCorrespondenceGUI::cb_menuGroup2Mean(Fl_Menu_* o, void* v) {
  ((AnalyzeCorrespondenceGUI*)(o->parent()->user_data()))->cb_menuGroup2Mean_i(o,v);
}

void AnalyzeCorrespondenceGUI::cb_menuGroup2Median_i(Fl_Menu_*, void*) {
  this->HideGroups();
this->ShowSpheres();
this->ViewSampleGroup->show();
this->DisplayGroupMedian(2);
}
void AnalyzeCorrespondenceGUI::cb_menuGroup2Median(Fl_Menu_* o, void* v) {
  ((AnalyzeCorrespondenceGUI*)(o->parent()->user_data()))->cb_menuGroup2Median_i(o,v);
}

void AnalyzeCorrespondenceGUI::cb_PCA_i(Fl_Menu_*, void*) {
  this->HideGroups();
this->ShowSpheres();
this->ViewPCAModesGroup->show();
}
void AnalyzeCorrespondenceGUI::cb_PCA(Fl_Menu_* o, void* v) {
  ((AnalyzeCorrespondenceGUI*)(o->parent()->user_data()))->cb_PCA_i(o,v);
}

void AnalyzeCorrespondenceGUI::cb_ViewLinearRegressionChoice_i(Fl_Menu_*, void*) {
  this->HideGroups();
this->ShowSpheres();
this->ViewRegressionGroup->show();
this->ComputeRegressionShape();
}
void AnalyzeCorrespondenceGUI::cb_ViewLinearRegressionChoice(Fl_Menu_* o, void* v) {
  ((AnalyzeCorrespondenceGUI*)(o->parent()->user_data()))->cb_ViewLinearRegressionChoice_i(o,v);
}

void AnalyzeCorrespondenceGUI::cb_Mean1_i(Fl_Menu_*, void*) {
  this->HideGroups();
this->ViewMeanGroup->show();
this->ViewMeanGroup->label("Difference in Group Means");
this->DisplayMeanDifference();
}
void AnalyzeCorrespondenceGUI::cb_Mean1(Fl_Menu_* o, void* v) {
  ((AnalyzeCorrespondenceGUI*)(o->parent()->user_data()))->cb_Mean1_i(o,v);
}

void AnalyzeCorrespondenceGUI::cb_Reconstruction_i(Fl_Menu_*, void*) {
  this->HideGroups();
this->OptionsReconstructionGroup->show();
}
void AnalyzeCorrespondenceGUI::cb_Reconstruction(Fl_Menu_* o, void* v) {
  ((AnalyzeCorrespondenceGUI*)(o->parent()->user_data()))->cb_Reconstruction_i(o,v);
}

void AnalyzeCorrespondenceGUI::cb_Color_i(Fl_Menu_*, void*) {
  this->HideGroups();
this->OptionsColorSchemeGroup->show();
}
void AnalyzeCorrespondenceGUI::cb_Color(Fl_Menu_* o, void* v) {
  ((AnalyzeCorrespondenceGUI*)(o->parent()->user_data()))->cb_Color_i(o,v);
}

void AnalyzeCorrespondenceGUI::cb_Glyphs_i(Fl_Menu_*, void*) {
  this->HideGroups();
this->OptionsGlyphGroup->show();
}
void AnalyzeCorrespondenceGUI::cb_Glyphs(Fl_Menu_* o, void* v) {
  ((AnalyzeCorrespondenceGUI*)(o->parent()->user_data()))->cb_Glyphs_i(o,v);
}

Fl_Menu_Item AnalyzeCorrespondenceGUI::menu_menu[] = {
 {"File", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Load Point File", 0,  (Fl_Callback*)AnalyzeCorrespondenceGUI::cb_Load, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Load PCA Shape", 0,  (Fl_Callback*)AnalyzeCorrespondenceGUI::cb_Load1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Load PValues", 0,  (Fl_Callback*)AnalyzeCorrespondenceGUI::cb_Load2, 0, 17, FL_NORMAL_LABEL, 0, 14, 0},
 {"Load Vectors", 0,  (Fl_Callback*)AnalyzeCorrespondenceGUI::cb_Load3, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {"Load Tensors", 0,  0, 0, 17, FL_NORMAL_LABEL, 0, 14, 0},
 {"Write Points", 0,  (Fl_Callback*)AnalyzeCorrespondenceGUI::cb_Write, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Write Surface Mesh", 0,  0, 0, 1, FL_NORMAL_LABEL, 0, 14, 0},
 {"Write Level Set", 0,  0, 0, 17, FL_NORMAL_LABEL, 0, 14, 0},
 {"Write PCA Loadings", 0,  (Fl_Callback*)AnalyzeCorrespondenceGUI::cb_Write1, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {"Point File Diff", 0,  (Fl_Callback*)AnalyzeCorrespondenceGUI::cb_Point, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {"Exit", 0,  (Fl_Callback*)AnalyzeCorrespondenceGUI::cb_Exit, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"View", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Samples", 0,  (Fl_Callback*)AnalyzeCorrespondenceGUI::cb_Samples, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Mean Shape", 0,  (Fl_Callback*)AnalyzeCorrespondenceGUI::cb_Mean, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Median Shape", 0,  (Fl_Callback*)AnalyzeCorrespondenceGUI::cb_Median, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Group 1 Mean", 0,  (Fl_Callback*)AnalyzeCorrespondenceGUI::cb_menuGroup1Mean, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Group 1 Median", 0,  (Fl_Callback*)AnalyzeCorrespondenceGUI::cb_menuGroup1Median, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Group 2 Mean", 0,  (Fl_Callback*)AnalyzeCorrespondenceGUI::cb_menuGroup2Mean, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Group 2 Median", 0,  (Fl_Callback*)AnalyzeCorrespondenceGUI::cb_menuGroup2Median, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"PCA Modes", 0,  (Fl_Callback*)AnalyzeCorrespondenceGUI::cb_PCA, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Linear Regression", 0,  (Fl_Callback*)AnalyzeCorrespondenceGUI::cb_ViewLinearRegressionChoice, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Mean Differences", 0,  (Fl_Callback*)AnalyzeCorrespondenceGUI::cb_Mean1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Options", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Reconstruction", 0,  (Fl_Callback*)AnalyzeCorrespondenceGUI::cb_Reconstruction, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Color Scheme", 0,  (Fl_Callback*)AnalyzeCorrespondenceGUI::cb_Color, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Glyphs", 0,  (Fl_Callback*)AnalyzeCorrespondenceGUI::cb_Glyphs, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* AnalyzeCorrespondenceGUI::menuGroup1Mean = AnalyzeCorrespondenceGUI::menu_menu + 17;
Fl_Menu_Item* AnalyzeCorrespondenceGUI::menuGroup1Median = AnalyzeCorrespondenceGUI::menu_menu + 18;
Fl_Menu_Item* AnalyzeCorrespondenceGUI::menuGroup2Mean = AnalyzeCorrespondenceGUI::menu_menu + 19;
Fl_Menu_Item* AnalyzeCorrespondenceGUI::menuGroup2Median = AnalyzeCorrespondenceGUI::menu_menu + 20;
Fl_Menu_Item* AnalyzeCorrespondenceGUI::ViewLinearRegressionChoice = AnalyzeCorrespondenceGUI::menu_menu + 22;

void AnalyzeCorrespondenceGUI::cb_samplespacing_i(Fl_Spinner*, void*) {
  this->ComputeSurface();
}
void AnalyzeCorrespondenceGUI::cb_samplespacing(Fl_Spinner* o, void* v) {
  ((AnalyzeCorrespondenceGUI*)(o->parent()->parent()->user_data()))->cb_samplespacing_i(o,v);
}

void AnalyzeCorrespondenceGUI::cb_neighborhoodsize_i(Fl_Spinner*, void*) {
  this->ComputeSurface();
}
void AnalyzeCorrespondenceGUI::cb_neighborhoodsize(Fl_Spinner* o, void* v) {
  ((AnalyzeCorrespondenceGUI*)(o->parent()->parent()->user_data()))->cb_neighborhoodsize_i(o,v);
}

void AnalyzeCorrespondenceGUI::cb_ON_i(Fl_Button*, void*) {
  this->ComputeSurface();
}
void AnalyzeCorrespondenceGUI::cb_ON(Fl_Button* o, void* v) {
  ((AnalyzeCorrespondenceGUI*)(o->parent()->parent()->user_data()))->cb_ON_i(o,v);
}

void AnalyzeCorrespondenceGUI::cb_OFF_i(Fl_Button*, void*) {
  this->RemoveSurface();
}
void AnalyzeCorrespondenceGUI::cb_OFF(Fl_Button* o, void* v) {
  ((AnalyzeCorrespondenceGUI*)(o->parent()->parent()->user_data()))->cb_OFF_i(o,v);
}

void AnalyzeCorrespondenceGUI::cb_smooth_iter_i(Fl_Spinner*, void*) {
  this->SetSurfaceSmoothing();
}
void AnalyzeCorrespondenceGUI::cb_smooth_iter(Fl_Spinner* o, void* v) {
  ((AnalyzeCorrespondenceGUI*)(o->parent()->parent()->user_data()))->cb_smooth_iter_i(o,v);
}

void AnalyzeCorrespondenceGUI::cb_color_switcher_i(Fl_Spinner*, void*) {
  this->ChangeColorScheme();
}
void AnalyzeCorrespondenceGUI::cb_color_switcher(Fl_Spinner* o, void* v) {
  ((AnalyzeCorrespondenceGUI*)(o->parent()->parent()->user_data()))->cb_color_switcher_i(o,v);
}

void AnalyzeCorrespondenceGUI::cb_glyph_scale_i(Fl_Value_Slider*, void*) {
  this->SetGlyphScale();
}
void AnalyzeCorrespondenceGUI::cb_glyph_scale(Fl_Value_Slider* o, void* v) {
  ((AnalyzeCorrespondenceGUI*)(o->parent()->parent()->user_data()))->cb_glyph_scale_i(o,v);
}

void AnalyzeCorrespondenceGUI::cb_glyph_quality_i(Fl_Value_Slider*, void*) {
  this->SetGlyphScale();
}
void AnalyzeCorrespondenceGUI::cb_glyph_quality(Fl_Value_Slider* o, void* v) {
  ((AnalyzeCorrespondenceGUI*)(o->parent()->parent()->user_data()))->cb_glyph_quality_i(o,v);
}

void AnalyzeCorrespondenceGUI::cb_show_correspondence_button_i(Fl_Light_Button*, void*) {
  this->ShowCorrespondence();
}
void AnalyzeCorrespondenceGUI::cb_show_correspondence_button(Fl_Light_Button* o, void* v) {
  ((AnalyzeCorrespondenceGUI*)(o->parent()->parent()->user_data()))->cb_show_correspondence_button_i(o,v);
}

void AnalyzeCorrespondenceGUI::cb_ON1_i(Fl_Button*, void*) {
  this->ShowGlyphs();
}
void AnalyzeCorrespondenceGUI::cb_ON1(Fl_Button* o, void* v) {
  ((AnalyzeCorrespondenceGUI*)(o->parent()->parent()->user_data()))->cb_ON1_i(o,v);
}

void AnalyzeCorrespondenceGUI::cb_OFF1_i(Fl_Button*, void*) {
  this->RemoveGlyphs();
}
void AnalyzeCorrespondenceGUI::cb_OFF1(Fl_Button* o, void* v) {
  ((AnalyzeCorrespondenceGUI*)(o->parent()->parent()->user_data()))->cb_OFF1_i(o,v);
}

void AnalyzeCorrespondenceGUI::cb_mode_position_i(Fl_Value_Slider*, void*) {
  this->ComputeModeShape();
}
void AnalyzeCorrespondenceGUI::cb_mode_position(Fl_Value_Slider* o, void* v) {
  ((AnalyzeCorrespondenceGUI*)(o->parent()->parent()->user_data()))->cb_mode_position_i(o,v);
}

void AnalyzeCorrespondenceGUI::cb_groupdiff_position_i(Fl_Slider*, void*) {
  this->ComputeGroupMeanDifferenceShape();
}
void AnalyzeCorrespondenceGUI::cb_groupdiff_position(Fl_Slider* o, void* v) {
  ((AnalyzeCorrespondenceGUI*)(o->parent()->parent()->user_data()))->cb_groupdiff_position_i(o,v);
}

void AnalyzeCorrespondenceGUI::cb_mode_i(Fl_Spinner*, void*) {
  this->mode_position->value(0.0);
this->ComputeModeShape();
this->ComputeSimpleRegressionParameters();
}
void AnalyzeCorrespondenceGUI::cb_mode(Fl_Spinner* o, void* v) {
  ((AnalyzeCorrespondenceGUI*)(o->parent()->parent()->user_data()))->cb_mode_i(o,v);
}

void AnalyzeCorrespondenceGUI::cb_simple_regression_i(Fl_Value_Slider*, void*) {
  this->ComputeSimpleRegressionShape();
}
void AnalyzeCorrespondenceGUI::cb_simple_regression(Fl_Value_Slider* o, void* v) {
  ((AnalyzeCorrespondenceGUI*)(o->parent()->parent()->user_data()))->cb_simple_regression_i(o,v);
}

void AnalyzeCorrespondenceGUI::cb_position_i(Fl_Value_Slider*, void*) {
  this->ComputeRegressionShape();
}
void AnalyzeCorrespondenceGUI::cb_position(Fl_Value_Slider* o, void* v) {
  ((AnalyzeCorrespondenceGUI*)(o->parent()->parent()->user_data()))->cb_position_i(o,v);
}

void AnalyzeCorrespondenceGUI::cb_sample_selector_i(Fl_Spinner*, void*) {
  this->DisplaySamples();
}
void AnalyzeCorrespondenceGUI::cb_sample_selector(Fl_Spinner* o, void* v) {
  ((AnalyzeCorrespondenceGUI*)(o->parent()->parent()->user_data()))->cb_sample_selector_i(o,v);
}

AnalyzeCorrespondenceGUI::AnalyzeCorrespondenceGUI() {
  { mainWindow = new Fl_Double_Window(670, 700, "ShapeWorks View");
    mainWindow->box(FL_BORDER_BOX);
    mainWindow->color((Fl_Color)FL_INACTIVE_COLOR);
    mainWindow->labelfont(9);
    mainWindow->labelsize(20);
    mainWindow->user_data((void*)(this));
    mainWindow->align(FL_ALIGN_TOP_LEFT);
    { menu = new Fl_Menu_Bar(0, 0, 665, 20);
      menu->box(FL_PLASTIC_UP_BOX);
      menu->color((Fl_Color)17);
      menu->labeltype(FL_NO_LABEL);
      menu->menu(menu_menu);
    } // Fl_Menu_Bar* menu
    { imageView = new vtkFlRenderWindowInteractor(2, 25, 660, 600);
      imageView->box(FL_PLASTIC_THIN_UP_BOX);
      imageView->color((Fl_Color)FL_FOREGROUND_COLOR);
      imageView->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      imageView->labeltype(FL_NORMAL_LABEL);
      imageView->labelfont(0);
      imageView->labelsize(14);
      imageView->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      imageView->align(FL_ALIGN_BOTTOM);
      imageView->when(FL_WHEN_RELEASE);
    } // vtkFlRenderWindowInteractor* imageView
    { OptionsReconstructionGroup = new Fl_Group(5, 631, 660, 62, "Surface Reconstruction Options");
      OptionsReconstructionGroup->box(FL_PLASTIC_THIN_UP_BOX);
      OptionsReconstructionGroup->color((Fl_Color)FL_FOREGROUND_COLOR);
      OptionsReconstructionGroup->labeltype(FL_ENGRAVED_LABEL);
      OptionsReconstructionGroup->labelsize(20);
      OptionsReconstructionGroup->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      { samplespacing = new Fl_Spinner(485, 637, 45, 23, "Spacing");
        samplespacing->type(1);
        samplespacing->box(FL_PLASTIC_THIN_UP_BOX);
        samplespacing->labeltype(FL_ENGRAVED_LABEL);
        samplespacing->labelfont(5);
        samplespacing->minimum(0.5);
        samplespacing->step(0.5);
        samplespacing->callback((Fl_Callback*)cb_samplespacing);
        samplespacing->align(FL_ALIGN_RIGHT);
      } // Fl_Spinner* samplespacing
      { neighborhoodsize = new Fl_Spinner(311, 638, 45, 21, "Neighbor. Size");
        neighborhoodsize->labeltype(FL_ENGRAVED_LABEL);
        neighborhoodsize->labelfont(5);
        neighborhoodsize->value(5);
        neighborhoodsize->callback((Fl_Callback*)cb_neighborhoodsize);
        neighborhoodsize->align(FL_ALIGN_RIGHT);
      } // Fl_Spinner* neighborhoodsize
      { Fl_Button* o = new Fl_Button(126, 661, 50, 25, "ON");
        o->box(FL_PLASTIC_ROUND_UP_BOX);
        o->down_box(FL_PLASTIC_ROUND_DOWN_BOX);
        o->color((Fl_Color)FL_GREEN);
        o->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
        o->labeltype(FL_ENGRAVED_LABEL);
        o->labelfont(5);
        o->labelcolor((Fl_Color)FL_INACTIVE_COLOR);
        o->callback((Fl_Callback*)cb_ON);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(70, 661, 50, 25, "OFF");
        o->box(FL_PLASTIC_ROUND_UP_BOX);
        o->down_box(FL_PLASTIC_ROUND_DOWN_BOX);
        o->color((Fl_Color)1);
        o->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
        o->labeltype(FL_ENGRAVED_LABEL);
        o->labelfont(5);
        o->labelcolor((Fl_Color)FL_INACTIVE_COLOR);
        o->callback((Fl_Callback*)cb_OFF);
      } // Fl_Button* o
      { smooth_iter = new Fl_Spinner(484, 663, 45, 23, "Mesh Smooth");
        smooth_iter->tooltip("Set the number of iterations for surface smoothing.");
        smooth_iter->type(1);
        smooth_iter->box(FL_PLASTIC_THIN_UP_BOX);
        smooth_iter->labeltype(FL_ENGRAVED_LABEL);
        smooth_iter->labelfont(5);
        smooth_iter->minimum(0);
        smooth_iter->maximum(5000);
        smooth_iter->callback((Fl_Callback*)cb_smooth_iter);
        smooth_iter->align(FL_ALIGN_RIGHT);
      } // Fl_Spinner* smooth_iter
      { gradsmooth = new Fl_Spinner(311, 663, 45, 23, "Grad. Smooth");
        gradsmooth->type(1);
        gradsmooth->box(FL_PLASTIC_THIN_UP_BOX);
        gradsmooth->labeltype(FL_ENGRAVED_LABEL);
        gradsmooth->labelfont(5);
        gradsmooth->minimum(0);
        gradsmooth->maximum(10);
        gradsmooth->step(0.1);
        gradsmooth->align(FL_ALIGN_RIGHT);
      } // Fl_Spinner* gradsmooth
      OptionsReconstructionGroup->end();
    } // Fl_Group* OptionsReconstructionGroup
    { OptionsColorSchemeGroup = new Fl_Group(5, 631, 660, 60, "Color Options");
      OptionsColorSchemeGroup->box(FL_PLASTIC_THIN_UP_BOX);
      OptionsColorSchemeGroup->color((Fl_Color)FL_FOREGROUND_COLOR);
      OptionsColorSchemeGroup->labeltype(FL_ENGRAVED_LABEL);
      OptionsColorSchemeGroup->labelsize(20);
      OptionsColorSchemeGroup->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      OptionsColorSchemeGroup->hide();
      { color_switcher = new Fl_Spinner(416, 647, 55, 24, "Color Scheme Number");
        color_switcher->box(FL_PLASTIC_ROUND_UP_BOX);
        color_switcher->color((Fl_Color)FL_FOREGROUND_COLOR);
        color_switcher->labeltype(FL_ENGRAVED_LABEL);
        color_switcher->labelfont(5);
        color_switcher->labelsize(18);
        color_switcher->minimum(0);
        color_switcher->maximum(1);
        color_switcher->textfont(5);
        color_switcher->callback((Fl_Callback*)cb_color_switcher);
      } // Fl_Spinner* color_switcher
      OptionsColorSchemeGroup->end();
    } // Fl_Group* OptionsColorSchemeGroup
    { OptionsGlyphGroup = new Fl_Group(5, 631, 660, 64, "Glyph Options");
      OptionsGlyphGroup->box(FL_PLASTIC_THIN_UP_BOX);
      OptionsGlyphGroup->color((Fl_Color)FL_FOREGROUND_COLOR);
      OptionsGlyphGroup->labeltype(FL_ENGRAVED_LABEL);
      OptionsGlyphGroup->labelsize(20);
      OptionsGlyphGroup->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      { glyph_scale = new Fl_Value_Slider(281, 661, 259, 15, "Glyph Size");
        glyph_scale->type(5);
        glyph_scale->box(FL_PLASTIC_ROUND_DOWN_BOX);
        glyph_scale->labeltype(FL_ENGRAVED_LABEL);
        glyph_scale->labelfont(5);
        glyph_scale->minimum(0.1);
        glyph_scale->maximum(10);
        glyph_scale->step(0.1);
        glyph_scale->value(1);
        glyph_scale->callback((Fl_Callback*)cb_glyph_scale);
        glyph_scale->align(FL_ALIGN_LEFT);
        glyph_scale->when(FL_WHEN_RELEASE);
      } // Fl_Value_Slider* glyph_scale
      { glyph_quality = new Fl_Value_Slider(281, 641, 259, 15, "Glyph Quality");
        glyph_quality->type(5);
        glyph_quality->box(FL_PLASTIC_ROUND_DOWN_BOX);
        glyph_quality->labeltype(FL_ENGRAVED_LABEL);
        glyph_quality->labelfont(5);
        glyph_quality->minimum(1);
        glyph_quality->maximum(20);
        glyph_quality->step(0.5);
        glyph_quality->value(5);
        glyph_quality->callback((Fl_Callback*)cb_glyph_quality);
        glyph_quality->align(FL_ALIGN_LEFT);
        glyph_quality->when(FL_WHEN_RELEASE);
      } // Fl_Value_Slider* glyph_quality
      { show_correspondence_button = new Fl_Light_Button(555, 645, 15, 20, "Show Corresp.");
        show_correspondence_button->value(1);
        show_correspondence_button->labeltype(FL_ENGRAVED_LABEL);
        show_correspondence_button->labelfont(5);
        show_correspondence_button->callback((Fl_Callback*)cb_show_correspondence_button);
        show_correspondence_button->align(132|FL_ALIGN_INSIDE);
      } // Fl_Light_Button* show_correspondence_button
      { Fl_Button* o = new Fl_Button(110, 660, 50, 25, "ON");
        o->box(FL_PLASTIC_ROUND_UP_BOX);
        o->down_box(FL_PLASTIC_ROUND_DOWN_BOX);
        o->color((Fl_Color)FL_GREEN);
        o->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
        o->labeltype(FL_ENGRAVED_LABEL);
        o->labelfont(5);
        o->labelcolor((Fl_Color)FL_INACTIVE_COLOR);
        o->callback((Fl_Callback*)cb_ON1);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(54, 660, 50, 25, "OFF");
        o->box(FL_PLASTIC_ROUND_UP_BOX);
        o->down_box(FL_PLASTIC_ROUND_DOWN_BOX);
        o->color((Fl_Color)1);
        o->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
        o->labeltype(FL_ENGRAVED_LABEL);
        o->labelfont(5);
        o->labelcolor((Fl_Color)FL_INACTIVE_COLOR);
        o->callback((Fl_Callback*)cb_OFF1);
      } // Fl_Button* o
      OptionsGlyphGroup->end();
    } // Fl_Group* OptionsGlyphGroup
    { ViewMeanGroup = new Fl_Group(4, 631, 660, 60, "Mean Shape");
      ViewMeanGroup->box(FL_PLASTIC_THIN_UP_BOX);
      ViewMeanGroup->color((Fl_Color)FL_FOREGROUND_COLOR);
      ViewMeanGroup->labeltype(FL_ENGRAVED_LABEL);
      ViewMeanGroup->labelsize(20);
      ViewMeanGroup->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      ViewMeanGroup->hide();
      ViewMeanGroup->end();
    } // Fl_Group* ViewMeanGroup
    { ViewPCAModesGroup = new Fl_Group(5, 633, 660, 57, "PCA");
      ViewPCAModesGroup->box(FL_PLASTIC_THIN_UP_BOX);
      ViewPCAModesGroup->color((Fl_Color)FL_FOREGROUND_COLOR);
      ViewPCAModesGroup->labeltype(FL_ENGRAVED_LABEL);
      ViewPCAModesGroup->labelsize(20);
      ViewPCAModesGroup->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      ViewPCAModesGroup->hide();
      { mode_position = new Fl_Value_Slider(123, 641, 235, 15, "slider:");
        mode_position->type(5);
        mode_position->box(FL_PLASTIC_THIN_DOWN_BOX);
        mode_position->selection_color((Fl_Color)1);
        mode_position->labeltype(FL_NO_LABEL);
        mode_position->minimum(-3);
        mode_position->maximum(3);
        mode_position->textsize(14);
        mode_position->callback((Fl_Callback*)cb_mode_position);
      } // Fl_Value_Slider* mode_position
      { lambda_display = new Fl_Value_Output(71, 667, 60, 18, "Eig-val.");
        lambda_display->box(FL_PLASTIC_ROUND_UP_BOX);
        lambda_display->color((Fl_Color)FL_FOREGROUND_COLOR);
        lambda_display->labeltype(FL_EMBOSSED_LABEL);
        lambda_display->labelsize(12);
        lambda_display->textsize(12);
      } // Fl_Value_Output* lambda_display
      { groupdiff_position = new Fl_Slider(195, 668, 213, 15, "slider:");
        groupdiff_position->type(5);
        groupdiff_position->box(FL_PLASTIC_THIN_DOWN_BOX);
        groupdiff_position->color((Fl_Color)17);
        groupdiff_position->selection_color((Fl_Color)1);
        groupdiff_position->labeltype(FL_NO_LABEL);
        groupdiff_position->step(0.01);
        groupdiff_position->callback((Fl_Callback*)cb_groupdiff_position);
        groupdiff_position->align(FL_ALIGN_BOTTOM_LEFT|FL_ALIGN_INSIDE);
      } // Fl_Slider* groupdiff_position
      { group1LabelBox = new Fl_Box(155, 669, 30, 16, "Group 1");
        group1LabelBox->labeltype(FL_EMBOSSED_LABEL);
        group1LabelBox->labelsize(12);
      } // Fl_Box* group1LabelBox
      { group2LabelBox = new Fl_Box(421, 668, 30, 16, "Group 2");
        group2LabelBox->labeltype(FL_EMBOSSED_LABEL);
        group2LabelBox->labelsize(12);
      } // Fl_Box* group2LabelBox
      { mode = new Fl_Spinner(66, 639, 45, 19, "Mode");
        mode->box(FL_PLASTIC_THIN_DOWN_BOX);
        mode->labeltype(FL_EMBOSSED_LABEL);
        mode->labelsize(12);
        mode->minimum(0);
        mode->textsize(12);
        mode->callback((Fl_Callback*)cb_mode);
        mode->align(FL_ALIGN_BOTTOM);
      } // Fl_Spinner* mode
      { simple_regression = new Fl_Value_Slider(474, 660, 183, 15, "PC regress");
        simple_regression->type(5);
        simple_regression->box(FL_PLASTIC_THIN_DOWN_BOX);
        simple_regression->selection_color((Fl_Color)1);
        simple_regression->labeltype(FL_EMBOSSED_LABEL);
        simple_regression->labelsize(12);
        simple_regression->minimum(-3);
        simple_regression->maximum(3);
        simple_regression->textsize(14);
        simple_regression->callback((Fl_Callback*)cb_simple_regression);
        simple_regression->align(FL_ALIGN_TOP_LEFT);
      } // Fl_Value_Slider* simple_regression
      { loading_display = new Fl_Value_Output(365, 639, 48, 18, "PC loading");
        loading_display->box(FL_PLASTIC_ROUND_UP_BOX);
        loading_display->color((Fl_Color)FL_FOREGROUND_COLOR);
        loading_display->labeltype(FL_EMBOSSED_LABEL);
        loading_display->labelsize(12);
        loading_display->textsize(12);
        loading_display->align(FL_ALIGN_RIGHT);
      } // Fl_Value_Output* loading_display
      ViewPCAModesGroup->end();
    } // Fl_Group* ViewPCAModesGroup
    { ViewRegressionGroup = new Fl_Group(3, 632, 660, 60, "Linear Regression");
      ViewRegressionGroup->box(FL_PLASTIC_THIN_UP_BOX);
      ViewRegressionGroup->color((Fl_Color)FL_FOREGROUND_COLOR);
      ViewRegressionGroup->selection_color((Fl_Color)FL_BACKGROUND2_COLOR);
      ViewRegressionGroup->labeltype(FL_ENGRAVED_LABEL);
      ViewRegressionGroup->labelsize(20);
      ViewRegressionGroup->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      ViewRegressionGroup->hide();
      { position = new Fl_Value_Slider(208, 646, 452, 16, "Predictor / Explanatory Variable");
        position->type(5);
        position->box(FL_PLASTIC_ROUND_DOWN_BOX);
        position->color((Fl_Color)17);
        position->selection_color((Fl_Color)1);
        position->labeltype(FL_ENGRAVED_LABEL);
        position->labelfont(5);
        position->minimum(-5);
        position->maximum(5);
        position->step(0.1);
        position->callback((Fl_Callback*)cb_position);
      } // Fl_Value_Slider* position
      ViewRegressionGroup->end();
    } // Fl_Group* ViewRegressionGroup
    { ViewSampleGroup = new Fl_Group(4, 631, 659, 60, "Shape Samples");
      ViewSampleGroup->box(FL_PLASTIC_THIN_UP_BOX);
      ViewSampleGroup->color((Fl_Color)FL_FOREGROUND_COLOR);
      ViewSampleGroup->labeltype(FL_ENGRAVED_LABEL);
      ViewSampleGroup->labelsize(20);
      ViewSampleGroup->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      ViewSampleGroup->hide();
      { sample_selector = new Fl_Spinner(325, 639, 75, 24, "Sample Number");
        sample_selector->labeltype(FL_ENGRAVED_LABEL);
        sample_selector->labelsize(18);
        sample_selector->minimum(0);
        sample_selector->callback((Fl_Callback*)cb_sample_selector);
        sample_selector->align(FL_ALIGN_BOTTOM);
      } // Fl_Spinner* sample_selector
      { group_display = new Fl_Value_Output(464, 640, 33, 24, "Group ID");
        group_display->box(FL_PLASTIC_ROUND_UP_BOX);
        group_display->color((Fl_Color)FL_FOREGROUND_COLOR);
        group_display->selection_color((Fl_Color)16);
        group_display->labeltype(FL_ENGRAVED_LABEL);
        group_display->labelsize(18);
        group_display->minimum(1);
        group_display->maximum(100);
        group_display->value(1);
        group_display->align(FL_ALIGN_BOTTOM);
      } // Fl_Value_Output* group_display
      ViewSampleGroup->end();
    } // Fl_Group* ViewSampleGroup
    mainWindow->end();
  } // Fl_Double_Window* mainWindow
}

AnalyzeCorrespondenceGUI::~AnalyzeCorrespondenceGUI() {
}

void AnalyzeCorrespondenceGUI::Quit() {
}

void AnalyzeCorrespondenceGUI::Show() {
}

void AnalyzeCorrespondenceGUI::Hide() {
}

void AnalyzeCorrespondenceGUI::ComputeRegressionShape() {
}

void AnalyzeCorrespondenceGUI::SetGlyphScale() {
}

void AnalyzeCorrespondenceGUI::ComputeSurface() {
}

void AnalyzeCorrespondenceGUI::RemoveSurface() {
}

void AnalyzeCorrespondenceGUI::ChangeColorScheme() {
}

void AnalyzeCorrespondenceGUI::HideGroups() {
}

void AnalyzeCorrespondenceGUI::DisplayMean(unsigned int) {
}

void AnalyzeCorrespondenceGUI::DisplaySamples() {
}

void AnalyzeCorrespondenceGUI::ComputeModeShape() {
}

void AnalyzeCorrespondenceGUI::ComputeGroupMeanDifferenceShape() {
}

void AnalyzeCorrespondenceGUI::WritePoints() {
}

void AnalyzeCorrespondenceGUI::WritePCALoadings() {
}

void AnalyzeCorrespondenceGUI::LoadScalars() {
}

void AnalyzeCorrespondenceGUI::DisplayMeanDifference() {
}

void AnalyzeCorrespondenceGUI::DisplayGroupMedian(int) {
}

void AnalyzeCorrespondenceGUI::ShowCorrespondence() {
}

void AnalyzeCorrespondenceGUI::ComputeSimpleRegressionShape() {
}

void AnalyzeCorrespondenceGUI::ComputeSimpleRegressionParameters() {
}

void AnalyzeCorrespondenceGUI::LoadPCAShape() {
}

void AnalyzeCorrespondenceGUI::LoadPointFile() {
}

void AnalyzeCorrespondenceGUI::ShowSpheres() {
}

void AnalyzeCorrespondenceGUI::SetSurfaceSmoothing() {
}

void AnalyzeCorrespondenceGUI::LoadVectorField() {
}

void AnalyzeCorrespondenceGUI::PointFileDiff() {
}

void AnalyzeCorrespondenceGUI::ShowGlyphs() {
}

void AnalyzeCorrespondenceGUI::RemoveGlyphs() {
}
