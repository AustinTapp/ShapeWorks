// generated by Fast Light User Interface Designer (fluid) version 1.0110

#ifndef CorrespondenceGUI_h
#define CorrespondenceGUI_h
#include <FL/Fl.H>
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Tile.H>
#include <FL/Fl_Box.H>
#include "vtkFlRenderWindowInteractor.h"
#include <FL/Fl_Tabs.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Light_Button.H>
#include <FL/Fl_Choice.H>
#include <FL/Fl_Spinner.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Value_Output.H>
#include <FL/Fl_Clock.H>
#include <FL/Fl_Input.H>
#include <FL/Fl_Text_Display.H>
#include <FL/Fl_Roller.H>

class CorrespondenceGUI {
public:
  CorrespondenceGUI();
  Fl_Double_Window *m_MainWindow;
  Fl_Tile *m_Viewer1Tile;
  vtkFlRenderWindowInteractor *m_Viewer1;
  Fl_Tabs *parameter_tabs;
  Fl_Light_Button *toggle_sampling_button;
private:
  void cb_toggle_sampling_button_i(Fl_Light_Button*, void*);
  static void cb_toggle_sampling_button(Fl_Light_Button*, void*);
public:
  Fl_Choice *adaptivity_mode_choice;
private:
  void cb_adaptivity_mode_choice_i(Fl_Choice*, void*);
  static void cb_adaptivity_mode_choice(Fl_Choice*, void*);
  static Fl_Menu_Item menu_adaptivity_mode_choice[];
public:
  Fl_Spinner *rho_spinner;
private:
  void cb_rho_spinner_i(Fl_Spinner*, void*);
  static void cb_rho_spinner(Fl_Spinner*, void*);
public:
  Fl_Spinner *s_spinner;
  Fl_Spinner *relative_gradient_scaling_spinner;
private:
  void cb_relative_gradient_scaling_spinner_i(Fl_Spinner*, void*);
  static void cb_relative_gradient_scaling_spinner(Fl_Spinner*, void*);
public:
  Fl_Light_Button *toggle_correspondence_button;
private:
  void cb_toggle_correspondence_button_i(Fl_Light_Button*, void*);
  static void cb_toggle_correspondence_button(Fl_Light_Button*, void*);
public:
  Fl_Spinner *recompute_covariance_interval_spinner;
private:
  void cb_recompute_covariance_interval_spinner_i(Fl_Spinner*, void*);
  static void cb_recompute_covariance_interval_spinner(Fl_Spinner*, void*);
public:
  Fl_Light_Button *hold_min_variance_button;
private:
  void cb_hold_min_variance_button_i(Fl_Light_Button*, void*);
  static void cb_hold_min_variance_button(Fl_Light_Button*, void*);
public:
  Fl_Spinner *min_variance_spinner;
private:
  void cb_min_variance_spinner_i(Fl_Spinner*, void*);
  static void cb_min_variance_spinner(Fl_Spinner*, void*);
public:
  Fl_Choice *correspondence_mode_choice;
private:
  void cb_correspondence_mode_choice_i(Fl_Choice*, void*);
  static void cb_correspondence_mode_choice(Fl_Choice*, void*);
  static Fl_Menu_Item menu_correspondence_mode_choice[];
public:
  static Fl_Menu_Item *general_entropy_choice;
  Fl_Button *set_params_button;
private:
  void cb_set_params_button_i(Fl_Button*, void*);
  static void cb_set_params_button(Fl_Button*, void*);
public:
  Fl_Spinner *relative_energy_scaling_spinner;
private:
  void cb_relative_energy_scaling_spinner_i(Fl_Spinner*, void*);
  static void cb_relative_energy_scaling_spinner(Fl_Spinner*, void*);
public:
  Fl_Value_Output *surface_gradmag;
  Fl_Value_Output *correspondence_gradmag;
  Fl_Value_Output *surface_energy;
  Fl_Value_Output *correspondence_energy;
  Fl_Spinner *regression_interval_spinner;
private:
  void cb_regression_interval_spinner_i(Fl_Spinner*, void*);
  static void cb_regression_interval_spinner(Fl_Spinner*, void*);
public:
  Fl_Spinner *initial_min_variance_spinner;
private:
  void cb_initial_min_variance_spinner_i(Fl_Spinner*, void*);
  static void cb_initial_min_variance_spinner(Fl_Spinner*, void*);
public:
  Fl_Spinner *final_min_variance_spinner;
private:
  void cb_final_min_variance_spinner_i(Fl_Spinner*, void*);
  static void cb_final_min_variance_spinner(Fl_Spinner*, void*);
public:
  Fl_Spinner *min_variance_decay_iterations;
private:
  void cb_min_variance_decay_iterations_i(Fl_Spinner*, void*);
  static void cb_min_variance_decay_iterations(Fl_Spinner*, void*);
public:
  Fl_Light_Button *checkpointing_toggle;
  Fl_Choice *optimization_mode_choice;
private:
  void cb_optimization_mode_choice_i(Fl_Choice*, void*);
  static void cb_optimization_mode_choice(Fl_Choice*, void*);
  static Fl_Menu_Item menu_optimization_mode_choice[];
public:
  Fl_Spinner *time_step_spinner;
private:
  void cb_time_step_spinner_i(Fl_Spinner*, void*);
  static void cb_time_step_spinner(Fl_Spinner*, void*);
public:
  Fl_Light_Button *toggle_constraints_button;
private:
  void cb_toggle_constraints_button_i(Fl_Light_Button*, void*);
  static void cb_toggle_constraints_button(Fl_Light_Button*, void*);
public:
  Fl_Button *split_button;
private:
  void cb_split_button_i(Fl_Button*, void*);
  static void cb_split_button(Fl_Button*, void*);
public:
  Fl_Spinner *split_radius_spinner;
  Fl_Button *split_one_button;
private:
  void cb_split_one_button_i(Fl_Button*, void*);
  static void cb_split_one_button(Fl_Button*, void*);
public:
  Fl_Button *auto_initialize_button;
private:
  void cb_auto_initialize_button_i(Fl_Button*, void*);
  static void cb_auto_initialize_button(Fl_Button*, void*);
public:
  Fl_Spinner *split_interval_spinner;
  Fl_Light_Button *cancel_auto_initialize_button;
  Fl_Spinner *init_count_spinner;
  Fl_Button *add_point_button;
private:
  void cb_add_point_button_i(Fl_Button*, void*);
  static void cb_add_point_button(Fl_Button*, void*);
public:
  Fl_Spinner *cutoff_spinner;
  Fl_Spinner *ratio_spinner;
  Fl_Spinner *normal_sigma_spinner;
  Fl_Light_Button *toggle_domain_lock_button;
private:
  void cb_toggle_domain_lock_button_i(Fl_Light_Button*, void*);
  static void cb_toggle_domain_lock_button(Fl_Light_Button*, void*);
public:
  Fl_Button *optimize_start_button;
private:
  void cb_optimize_start_button_i(Fl_Button*, void*);
  static void cb_optimize_start_button(Fl_Button*, void*);
public:
  Fl_Button *optimize_stop_button;
private:
  void cb_optimize_stop_button_i(Fl_Button*, void*);
  static void cb_optimize_stop_button(Fl_Button*, void*);
public:
  Fl_Button *run_single_iteration;
private:
  void cb_run_single_iteration_i(Fl_Button*, void*);
  static void cb_run_single_iteration(Fl_Button*, void*);
public:
  Fl_Value_Output *iterations_window;
  Fl_Clock *iteration_clock;
  Fl_Value_Output *samples_output;
  Fl_Button *run_procrustes_button;
private:
  void cb_run_procrustes_button_i(Fl_Button*, void*);
  static void cb_run_procrustes_button(Fl_Button*, void*);
  void cb_exit_i(Fl_Button*, void*);
  static void cb_exit(Fl_Button*, void*);
public:
  Fl_Light_Button *use_procrustes_scaling_button;
private:
  void cb_use_procrustes_scaling_button_i(Fl_Light_Button*, void*);
  static void cb_use_procrustes_scaling_button(Fl_Light_Button*, void*);
public:
  Fl_Button *WritePointsButton;
private:
  void cb_WritePointsButton_i(Fl_Button*, void*);
  static void cb_WritePointsButton(Fl_Button*, void*);
public:
  Fl_Input *pointfile_prefix_input;
  Fl_Button *WriteModesButton;
private:
  void cb_WriteModesButton_i(Fl_Button*, void*);
  static void cb_WriteModesButton(Fl_Button*, void*);
public:
  Fl_Spinner *number_of_modes_spinner;
  Fl_Button *WriteParamtersButton;
private:
  void cb_WriteParamtersButton_i(Fl_Button*, void*);
  static void cb_WriteParamtersButton(Fl_Button*, void*);
public:
  Fl_Input *transform_filename_input;
  Fl_Button *WriteTransformButton;
private:
  void cb_WriteTransformButton_i(Fl_Button*, void*);
  static void cb_WriteTransformButton(Fl_Button*, void*);
public:
  Fl_Button *ReadTransformButton;
private:
  void cb_ReadTransformButton_i(Fl_Button*, void*);
  static void cb_ReadTransformButton(Fl_Button*, void*);
public:
  Fl_Text_Display *image_information;
  Fl_Tabs *visualization_tabs;
  Fl_Roller *SurfaceOpacity;
private:
  void cb_SurfaceOpacity_i(Fl_Roller*, void*);
  static void cb_SurfaceOpacity(Fl_Roller*, void*);
public:
  Fl_Spinner *selected_particle_spinner;
private:
  void cb_selected_particle_spinner_i(Fl_Spinner*, void*);
  static void cb_selected_particle_spinner(Fl_Spinner*, void*);
public:
  Fl_Spinner *neighborhood_size_spinner;
private:
  void cb_neighborhood_size_spinner_i(Fl_Spinner*, void*);
  static void cb_neighborhood_size_spinner(Fl_Spinner*, void*);
public:
  Fl_Spinner *glyph_scale_spinner;
private:
  void cb_glyph_scale_spinner_i(Fl_Spinner*, void*);
  static void cb_glyph_scale_spinner(Fl_Spinner*, void*);
public:
  Fl_Button *color_map_glyphs_button;
private:
  void cb_color_map_glyphs_button_i(Fl_Button*, void*);
  static void cb_color_map_glyphs_button(Fl_Button*, void*);
public:
  Fl_Spinner *viewer1_domain_spinner;
private:
  void cb_viewer1_domain_spinner_i(Fl_Spinner*, void*);
  static void cb_viewer1_domain_spinner(Fl_Spinner*, void*);
public:
  Fl_Spinner *viewer2_domain_spinner;
private:
  void cb_viewer2_domain_spinner_i(Fl_Spinner*, void*);
  static void cb_viewer2_domain_spinner(Fl_Spinner*, void*);
public:
  Fl_Spinner *frame_rate_spinner;
  Fl_Button *viz_neighborhood_button;
private:
  void cb_viz_neighborhood_button_i(Fl_Button*, void*);
  static void cb_viz_neighborhood_button(Fl_Button*, void*);
public:
  virtual ~CorrespondenceGUI();
  virtual void Quit();
  virtual void Show();
  virtual void Hide();
  virtual void SetSurfaceOpacity();
  void SetReferenceScale();
  virtual void WritePointsFile(const char *);
  virtual void optimize_start();
  virtual void optimize_stop();
  virtual void SetExperimental();
  virtual void ColorNeighborhood();
  virtual void VisualizeNeighborhood();
  virtual void SetNumericalParameter();
  virtual void SplitAllParticles();
  virtual void single_iteration();
  virtual void SetGlyphScale();
  virtual void SetAdaptivityMode();
  virtual void ViewerSelectDomain();
  virtual void ToggleCorrespondence();
  virtual void SetCorrespondenceMode();
  virtual void WritePointFiles();
  virtual void WriteModes();
  virtual void RecolorGlyphs();
  virtual void RunProcrustes();
  virtual void SplitParticle();
  virtual void ToggleDomainLock();
  virtual void ToggleSampling();
  virtual void AutoInitialize();
  virtual void WriteVTKMesh();
  virtual void WriteTransformFile() const;
  virtual void ReadTransformFile();
  virtual void SetOptimizationMode();
  virtual void AddSinglePoint();
  virtual void AutoVisualizeNeighborhood();
  virtual void ToggleConstraints();
  virtual void WriteParameters();
  virtual void SetMinimumVarianceDecay();
};
#endif
