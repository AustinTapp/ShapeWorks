// generated by Fast Light User Interface Designer (fluid) version 1.0110

#include "CorrespondenceGUI.h"

void CorrespondenceGUI::cb_toggle_sampling_button_i(Fl_Light_Button*, void*) {
  ToggleSampling();
}
void CorrespondenceGUI::cb_toggle_sampling_button(Fl_Light_Button* o, void* v) {
  ((CorrespondenceGUI*)(o->parent()->parent()->parent()->user_data()))->cb_toggle_sampling_button_i(o,v);
}

void CorrespondenceGUI::cb_adaptivity_mode_choice_i(Fl_Choice*, void*) {
  this->SetAdaptivityMode();
}
void CorrespondenceGUI::cb_adaptivity_mode_choice(Fl_Choice* o, void* v) {
  ((CorrespondenceGUI*)(o->parent()->parent()->parent()->user_data()))->cb_adaptivity_mode_choice_i(o,v);
}

Fl_Menu_Item CorrespondenceGUI::menu_adaptivity_mode_choice[] = {
 {"adaptive", 0,  0, 0, 4, FL_EMBOSSED_LABEL, 0, 12, 0},
 {"non-adaptive", 0,  0, 0, 0, FL_EMBOSSED_LABEL, 0, 12, 0},
 {"qualifier", 0,  0, 0, 4, FL_EMBOSSED_LABEL, 0, 12, 0},
 {"omega", 0,  0, 0, 4, FL_EMBOSSED_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0}
};

void CorrespondenceGUI::cb_rho_spinner_i(Fl_Spinner*, void*) {
  this->SetNumericalParameter();
}
void CorrespondenceGUI::cb_rho_spinner(Fl_Spinner* o, void* v) {
  ((CorrespondenceGUI*)(o->parent()->parent()->parent()->user_data()))->cb_rho_spinner_i(o,v);
}

void CorrespondenceGUI::cb_relative_gradient_scaling_spinner_i(Fl_Spinner*, void*) {
  this->SetNumericalParameter();
}
void CorrespondenceGUI::cb_relative_gradient_scaling_spinner(Fl_Spinner* o, void* v) {
  ((CorrespondenceGUI*)(o->parent()->parent()->parent()->user_data()))->cb_relative_gradient_scaling_spinner_i(o,v);
}

void CorrespondenceGUI::cb_toggle_correspondence_button_i(Fl_Light_Button*, void*) {
  ToggleCorrespondence();
}
void CorrespondenceGUI::cb_toggle_correspondence_button(Fl_Light_Button* o, void* v) {
  ((CorrespondenceGUI*)(o->parent()->parent()->parent()->user_data()))->cb_toggle_correspondence_button_i(o,v);
}

void CorrespondenceGUI::cb_recompute_covariance_interval_spinner_i(Fl_Spinner*, void*) {
  this->SetNumericalParameter();
}
void CorrespondenceGUI::cb_recompute_covariance_interval_spinner(Fl_Spinner* o, void* v) {
  ((CorrespondenceGUI*)(o->parent()->parent()->parent()->user_data()))->cb_recompute_covariance_interval_spinner_i(o,v);
}

void CorrespondenceGUI::cb_hold_min_variance_button_i(Fl_Light_Button*, void*) {
  this->SetNumericalParameter();
}
void CorrespondenceGUI::cb_hold_min_variance_button(Fl_Light_Button* o, void* v) {
  ((CorrespondenceGUI*)(o->parent()->parent()->parent()->user_data()))->cb_hold_min_variance_button_i(o,v);
}

void CorrespondenceGUI::cb_min_variance_spinner_i(Fl_Spinner*, void*) {
  this->SetNumericalParameter();
}
void CorrespondenceGUI::cb_min_variance_spinner(Fl_Spinner* o, void* v) {
  ((CorrespondenceGUI*)(o->parent()->parent()->parent()->user_data()))->cb_min_variance_spinner_i(o,v);
}

void CorrespondenceGUI::cb_correspondence_mode_choice_i(Fl_Choice*, void*) {
  this->SetCorrespondenceMode();
}
void CorrespondenceGUI::cb_correspondence_mode_choice(Fl_Choice* o, void* v) {
  ((CorrespondenceGUI*)(o->parent()->parent()->parent()->user_data()))->cb_correspondence_mode_choice_i(o,v);
}

Fl_Menu_Item CorrespondenceGUI::menu_correspondence_mode_choice[] = {
 {"mean force", 0,  0, 0, 0, FL_EMBOSSED_LABEL, 0, 12, 0},
 {"minimum entropy", 0,  0, 0, 4, FL_EMBOSSED_LABEL, 0, 12, 0},
 {"general entropy", 0,  0, 0, 5, FL_EMBOSSED_LABEL, 0, 12, 0},
 {"linear regression", 0,  0, 0, 0, FL_EMBOSSED_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* CorrespondenceGUI::general_entropy_choice = CorrespondenceGUI::menu_correspondence_mode_choice + 2;

void CorrespondenceGUI::cb_set_params_button_i(Fl_Button*, void*) {
  this->SetNumericalParameter();
}
void CorrespondenceGUI::cb_set_params_button(Fl_Button* o, void* v) {
  ((CorrespondenceGUI*)(o->parent()->parent()->parent()->user_data()))->cb_set_params_button_i(o,v);
}

void CorrespondenceGUI::cb_relative_energy_scaling_spinner_i(Fl_Spinner*, void*) {
  this->SetNumericalParameter();
}
void CorrespondenceGUI::cb_relative_energy_scaling_spinner(Fl_Spinner* o, void* v) {
  ((CorrespondenceGUI*)(o->parent()->parent()->parent()->user_data()))->cb_relative_energy_scaling_spinner_i(o,v);
}

void CorrespondenceGUI::cb_regression_interval_spinner_i(Fl_Spinner*, void*) {
  this->SetNumericalParameter();
}
void CorrespondenceGUI::cb_regression_interval_spinner(Fl_Spinner* o, void* v) {
  ((CorrespondenceGUI*)(o->parent()->parent()->parent()->user_data()))->cb_regression_interval_spinner_i(o,v);
}

void CorrespondenceGUI::cb_initial_min_variance_spinner_i(Fl_Spinner*, void*) {
  this->SetMinimumVarianceDecay();
}
void CorrespondenceGUI::cb_initial_min_variance_spinner(Fl_Spinner* o, void* v) {
  ((CorrespondenceGUI*)(o->parent()->parent()->parent()->user_data()))->cb_initial_min_variance_spinner_i(o,v);
}

void CorrespondenceGUI::cb_final_min_variance_spinner_i(Fl_Spinner*, void*) {
  this->SetMinimumVarianceDecay();
}
void CorrespondenceGUI::cb_final_min_variance_spinner(Fl_Spinner* o, void* v) {
  ((CorrespondenceGUI*)(o->parent()->parent()->parent()->user_data()))->cb_final_min_variance_spinner_i(o,v);
}

void CorrespondenceGUI::cb_min_variance_decay_iterations_i(Fl_Spinner*, void*) {
  this->SetMinimumVarianceDecay();
}
void CorrespondenceGUI::cb_min_variance_decay_iterations(Fl_Spinner* o, void* v) {
  ((CorrespondenceGUI*)(o->parent()->parent()->parent()->user_data()))->cb_min_variance_decay_iterations_i(o,v);
}

void CorrespondenceGUI::cb_optimization_mode_choice_i(Fl_Choice*, void*) {
  this->SetOptimizationMode();
}
void CorrespondenceGUI::cb_optimization_mode_choice(Fl_Choice* o, void* v) {
  ((CorrespondenceGUI*)(o->parent()->parent()->parent()->user_data()))->cb_optimization_mode_choice_i(o,v);
}

Fl_Menu_Item CorrespondenceGUI::menu_optimization_mode_choice[] = {
 {"Adaptive Gauss-Seidel Updates", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Jacobi Updates", 0,  0, 0, 4, FL_NORMAL_LABEL, 0, 12, 0},
 {"Gauss-Seidel Updates", 0,  0, 0, 4, FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0}
};

void CorrespondenceGUI::cb_time_step_spinner_i(Fl_Spinner*, void*) {
  this->SetNumericalParameter();
}
void CorrespondenceGUI::cb_time_step_spinner(Fl_Spinner* o, void* v) {
  ((CorrespondenceGUI*)(o->parent()->parent()->parent()->user_data()))->cb_time_step_spinner_i(o,v);
}

void CorrespondenceGUI::cb_toggle_constraints_button_i(Fl_Light_Button*, void*) {
  this->ToggleConstraints();
}
void CorrespondenceGUI::cb_toggle_constraints_button(Fl_Light_Button* o, void* v) {
  ((CorrespondenceGUI*)(o->parent()->parent()->parent()->user_data()))->cb_toggle_constraints_button_i(o,v);
}

void CorrespondenceGUI::cb_split_button_i(Fl_Button*, void*) {
  this->SplitAllParticles();
}
void CorrespondenceGUI::cb_split_button(Fl_Button* o, void* v) {
  ((CorrespondenceGUI*)(o->parent()->parent()->parent()->user_data()))->cb_split_button_i(o,v);
}

void CorrespondenceGUI::cb_split_one_button_i(Fl_Button*, void*) {
  this->SplitParticle();
}
void CorrespondenceGUI::cb_split_one_button(Fl_Button* o, void* v) {
  ((CorrespondenceGUI*)(o->parent()->parent()->parent()->user_data()))->cb_split_one_button_i(o,v);
}

void CorrespondenceGUI::cb_auto_initialize_button_i(Fl_Button*, void*) {
  this->AutoInitialize();
}
void CorrespondenceGUI::cb_auto_initialize_button(Fl_Button* o, void* v) {
  ((CorrespondenceGUI*)(o->parent()->parent()->parent()->user_data()))->cb_auto_initialize_button_i(o,v);
}

void CorrespondenceGUI::cb_add_point_button_i(Fl_Button*, void*) {
  this->AddSinglePoint();
}
void CorrespondenceGUI::cb_add_point_button(Fl_Button* o, void* v) {
  ((CorrespondenceGUI*)(o->parent()->parent()->parent()->user_data()))->cb_add_point_button_i(o,v);
}

void CorrespondenceGUI::cb_toggle_domain_lock_button_i(Fl_Light_Button*, void*) {
  ToggleDomainLock();
}
void CorrespondenceGUI::cb_toggle_domain_lock_button(Fl_Light_Button* o, void* v) {
  ((CorrespondenceGUI*)(o->parent()->parent()->parent()->user_data()))->cb_toggle_domain_lock_button_i(o,v);
}

void CorrespondenceGUI::cb_optimize_start_button_i(Fl_Button*, void*) {
  this->optimize_start();
}
void CorrespondenceGUI::cb_optimize_start_button(Fl_Button* o, void* v) {
  ((CorrespondenceGUI*)(o->parent()->parent()->parent()->user_data()))->cb_optimize_start_button_i(o,v);
}

void CorrespondenceGUI::cb_optimize_stop_button_i(Fl_Button*, void*) {
  this->optimize_stop();
}
void CorrespondenceGUI::cb_optimize_stop_button(Fl_Button* o, void* v) {
  ((CorrespondenceGUI*)(o->parent()->parent()->parent()->user_data()))->cb_optimize_stop_button_i(o,v);
}

void CorrespondenceGUI::cb_run_single_iteration_i(Fl_Button*, void*) {
  this->single_iteration();
}
void CorrespondenceGUI::cb_run_single_iteration(Fl_Button* o, void* v) {
  ((CorrespondenceGUI*)(o->parent()->parent()->parent()->user_data()))->cb_run_single_iteration_i(o,v);
}

void CorrespondenceGUI::cb_run_procrustes_button_i(Fl_Button*, void*) {
  this->RunProcrustes();
}
void CorrespondenceGUI::cb_run_procrustes_button(Fl_Button* o, void* v) {
  ((CorrespondenceGUI*)(o->parent()->parent()->parent()->user_data()))->cb_run_procrustes_button_i(o,v);
}

void CorrespondenceGUI::cb_exit_i(Fl_Button*, void*) {
  this->Quit();
}
void CorrespondenceGUI::cb_exit(Fl_Button* o, void* v) {
  ((CorrespondenceGUI*)(o->parent()->parent()->parent()->user_data()))->cb_exit_i(o,v);
}

void CorrespondenceGUI::cb_use_procrustes_scaling_button_i(Fl_Light_Button*, void*) {
  this->SetNumericalParameter();
}
void CorrespondenceGUI::cb_use_procrustes_scaling_button(Fl_Light_Button* o, void* v) {
  ((CorrespondenceGUI*)(o->parent()->parent()->parent()->user_data()))->cb_use_procrustes_scaling_button_i(o,v);
}

void CorrespondenceGUI::cb_WritePointsButton_i(Fl_Button*, void*) {
  this->WritePointFiles();
}
void CorrespondenceGUI::cb_WritePointsButton(Fl_Button* o, void* v) {
  ((CorrespondenceGUI*)(o->parent()->parent()->parent()->user_data()))->cb_WritePointsButton_i(o,v);
}

void CorrespondenceGUI::cb_WriteModesButton_i(Fl_Button*, void*) {
  this->WriteModes();
}
void CorrespondenceGUI::cb_WriteModesButton(Fl_Button* o, void* v) {
  ((CorrespondenceGUI*)(o->parent()->parent()->parent()->user_data()))->cb_WriteModesButton_i(o,v);
}

void CorrespondenceGUI::cb_WriteParamtersButton_i(Fl_Button*, void*) {
  this->WriteParameters();
}
void CorrespondenceGUI::cb_WriteParamtersButton(Fl_Button* o, void* v) {
  ((CorrespondenceGUI*)(o->parent()->parent()->parent()->user_data()))->cb_WriteParamtersButton_i(o,v);
}

void CorrespondenceGUI::cb_WriteTransformButton_i(Fl_Button*, void*) {
  this->WriteTransformFile();
}
void CorrespondenceGUI::cb_WriteTransformButton(Fl_Button* o, void* v) {
  ((CorrespondenceGUI*)(o->parent()->parent()->parent()->user_data()))->cb_WriteTransformButton_i(o,v);
}

void CorrespondenceGUI::cb_ReadTransformButton_i(Fl_Button*, void*) {
  this->ReadTransformFile();
}
void CorrespondenceGUI::cb_ReadTransformButton(Fl_Button* o, void* v) {
  ((CorrespondenceGUI*)(o->parent()->parent()->parent()->user_data()))->cb_ReadTransformButton_i(o,v);
}

void CorrespondenceGUI::cb_SurfaceOpacity_i(Fl_Roller*, void*) {
  this->SetSurfaceOpacity();
}
void CorrespondenceGUI::cb_SurfaceOpacity(Fl_Roller* o, void* v) {
  ((CorrespondenceGUI*)(o->parent()->parent()->parent()->user_data()))->cb_SurfaceOpacity_i(o,v);
}

void CorrespondenceGUI::cb_selected_particle_spinner_i(Fl_Spinner*, void*) {
  this->VisualizeNeighborhood();
}
void CorrespondenceGUI::cb_selected_particle_spinner(Fl_Spinner* o, void* v) {
  ((CorrespondenceGUI*)(o->parent()->parent()->parent()->user_data()))->cb_selected_particle_spinner_i(o,v);
}

void CorrespondenceGUI::cb_neighborhood_size_spinner_i(Fl_Spinner*, void*) {
  this->VisualizeNeighborhood();
}
void CorrespondenceGUI::cb_neighborhood_size_spinner(Fl_Spinner* o, void* v) {
  ((CorrespondenceGUI*)(o->parent()->parent()->parent()->user_data()))->cb_neighborhood_size_spinner_i(o,v);
}

void CorrespondenceGUI::cb_glyph_scale_spinner_i(Fl_Spinner*, void*) {
  this->SetGlyphScale();
}
void CorrespondenceGUI::cb_glyph_scale_spinner(Fl_Spinner* o, void* v) {
  ((CorrespondenceGUI*)(o->parent()->parent()->parent()->user_data()))->cb_glyph_scale_spinner_i(o,v);
}

void CorrespondenceGUI::cb_color_map_glyphs_button_i(Fl_Button*, void*) {
  this->RecolorGlyphs();
}
void CorrespondenceGUI::cb_color_map_glyphs_button(Fl_Button* o, void* v) {
  ((CorrespondenceGUI*)(o->parent()->parent()->parent()->user_data()))->cb_color_map_glyphs_button_i(o,v);
}

void CorrespondenceGUI::cb_viewer1_domain_spinner_i(Fl_Spinner*, void*) {
  this->ViewerSelectDomain();
}
void CorrespondenceGUI::cb_viewer1_domain_spinner(Fl_Spinner* o, void* v) {
  ((CorrespondenceGUI*)(o->parent()->parent()->parent()->user_data()))->cb_viewer1_domain_spinner_i(o,v);
}

void CorrespondenceGUI::cb_viewer2_domain_spinner_i(Fl_Spinner*, void*) {
  this->ViewerSelectDomain();
}
void CorrespondenceGUI::cb_viewer2_domain_spinner(Fl_Spinner* o, void* v) {
  ((CorrespondenceGUI*)(o->parent()->parent()->parent()->user_data()))->cb_viewer2_domain_spinner_i(o,v);
}

void CorrespondenceGUI::cb_viz_neighborhood_button_i(Fl_Button*, void*) {
  this->AutoVisualizeNeighborhood();
}
void CorrespondenceGUI::cb_viz_neighborhood_button(Fl_Button* o, void* v) {
  ((CorrespondenceGUI*)(o->parent()->parent()->parent()->user_data()))->cb_viz_neighborhood_button_i(o,v);
}

CorrespondenceGUI::CorrespondenceGUI() {
  { m_MainWindow = new Fl_Double_Window(756, 737, "Correspondence Viewers");
    m_MainWindow->box(FL_PLASTIC_UP_BOX);
    m_MainWindow->color((Fl_Color)FL_FOREGROUND_COLOR);
    m_MainWindow->labelsize(12);
    m_MainWindow->user_data((void*)(this));
    m_MainWindow->align(FL_ALIGN_TOP_LEFT);
    { m_Viewer1Tile = new Fl_Tile(0, 0, 755, 502);
      { Fl_Box* o = new Fl_Box(0, 0, 755, 501, "label");
        o->box(FL_PLASTIC_DOWN_BOX);
        o->color((Fl_Color)FL_INACTIVE_COLOR);
        o->labeltype(FL_NO_LABEL);
        Fl_Group::current()->resizable(o);
      } // Fl_Box* o
      { m_Viewer1 = new vtkFlRenderWindowInteractor(0, 0, 755, 500);
        m_Viewer1->box(FL_EMBOSSED_FRAME);
        m_Viewer1->color((Fl_Color)FL_FOREGROUND_COLOR);
        m_Viewer1->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
        m_Viewer1->labeltype(FL_NORMAL_LABEL);
        m_Viewer1->labelfont(0);
        m_Viewer1->labelsize(14);
        m_Viewer1->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
        m_Viewer1->align(FL_ALIGN_LEFT);
        m_Viewer1->when(FL_WHEN_RELEASE);
      } // vtkFlRenderWindowInteractor* m_Viewer1
      m_Viewer1Tile->end();
    } // Fl_Tile* m_Viewer1Tile
    { parameter_tabs = new Fl_Tabs(360, 505, 390, 225, "Options");
      parameter_tabs->box(FL_PLASTIC_DOWN_BOX);
      parameter_tabs->labeltype(FL_NO_LABEL);
      parameter_tabs->labelsize(12);
      parameter_tabs->align(66);
      { Fl_Group* o = new Fl_Group(365, 524, 380, 206, "Sampling");
        o->labeltype(FL_EMBOSSED_LABEL);
        o->labelsize(12);
        { toggle_sampling_button = new Fl_Light_Button(365, 526, 20, 35, "ON");
          toggle_sampling_button->tooltip("Toggle sampling on/off");
          toggle_sampling_button->box(FL_PLASTIC_ROUND_UP_BOX);
          toggle_sampling_button->value(1);
          toggle_sampling_button->color((Fl_Color)FL_BACKGROUND2_COLOR);
          toggle_sampling_button->selection_color((Fl_Color)2);
          toggle_sampling_button->labeltype(FL_NO_LABEL);
          toggle_sampling_button->labelsize(21);
          toggle_sampling_button->callback((Fl_Callback*)cb_toggle_sampling_button);
        } // Fl_Light_Button* toggle_sampling_button
        { adaptivity_mode_choice = new Fl_Choice(490, 534, 120, 20, "Surface Sampling");
          adaptivity_mode_choice->tooltip("Adaptivity Mode");
          adaptivity_mode_choice->box(FL_BORDER_BOX);
          adaptivity_mode_choice->down_box(FL_PLASTIC_ROUND_DOWN_BOX);
          adaptivity_mode_choice->labeltype(FL_ENGRAVED_LABEL);
          adaptivity_mode_choice->labelsize(12);
          adaptivity_mode_choice->textsize(12);
          adaptivity_mode_choice->callback((Fl_Callback*)cb_adaptivity_mode_choice);
          adaptivity_mode_choice->when(FL_WHEN_CHANGED);
          adaptivity_mode_choice->menu(menu_adaptivity_mode_choice);
        } // Fl_Choice* adaptivity_mode_choice
        { rho_spinner = new Fl_Spinner(611, 533, 40, 21, "adaptivity strength");
          rho_spinner->tooltip("Rho parameter for isotropic mode.");
          rho_spinner->type(1);
          rho_spinner->labeltype(FL_EMBOSSED_LABEL);
          rho_spinner->labelsize(10);
          rho_spinner->minimum(0);
          rho_spinner->maximum(1e+020);
          rho_spinner->step(0.1);
          rho_spinner->textsize(10);
          rho_spinner->callback((Fl_Callback*)cb_rho_spinner);
          rho_spinner->align(FL_ALIGN_RIGHT);
        } // Fl_Spinner* rho_spinner
        { s_spinner = new Fl_Spinner(535, 559, 62, 18, "planar spacing");
          s_spinner->tooltip("Samples per curvature unit parameter for the isotropic mode.");
          s_spinner->type(1);
          s_spinner->labeltype(FL_EMBOSSED_LABEL);
          s_spinner->labelsize(10);
          s_spinner->minimum(0);
          s_spinner->maximum(1e+020);
          s_spinner->step(0.1);
          s_spinner->textsize(10);
          s_spinner->hide();
          s_spinner->deactivate();
        } // Fl_Spinner* s_spinner
        { relative_gradient_scaling_spinner = new Fl_Spinner(570, 680, 65, 20, "relative grad scaling");
          relative_gradient_scaling_spinner->tooltip("Relative scaling of Correspondence to Sampling gradient");
          relative_gradient_scaling_spinner->type(1);
          relative_gradient_scaling_spinner->labeltype(FL_EMBOSSED_LABEL);
          relative_gradient_scaling_spinner->labelsize(10);
          relative_gradient_scaling_spinner->minimum(-10000);
          relative_gradient_scaling_spinner->maximum(10000);
          relative_gradient_scaling_spinner->step(0.1);
          relative_gradient_scaling_spinner->textsize(10);
          relative_gradient_scaling_spinner->callback((Fl_Callback*)cb_relative_gradient_scaling_spinner);
          relative_gradient_scaling_spinner->align(FL_ALIGN_RIGHT);
        } // Fl_Spinner* relative_gradient_scaling_spinner
        { toggle_correspondence_button = new Fl_Light_Button(365, 564, 20, 35, "CORR");
          toggle_correspondence_button->tooltip("Toggle correspondence on/off");
          toggle_correspondence_button->box(FL_PLASTIC_ROUND_UP_BOX);
          toggle_correspondence_button->color((Fl_Color)FL_BACKGROUND2_COLOR);
          toggle_correspondence_button->selection_color((Fl_Color)2);
          toggle_correspondence_button->labeltype(FL_NO_LABEL);
          toggle_correspondence_button->labelsize(18);
          toggle_correspondence_button->callback((Fl_Callback*)cb_toggle_correspondence_button);
        } // Fl_Light_Button* toggle_correspondence_button
        { recompute_covariance_interval_spinner = new Fl_Spinner(610, 592, 65, 18, "comp. interv.");
          recompute_covariance_interval_spinner->tooltip("Recompute Covariance Interval");
          recompute_covariance_interval_spinner->labeltype(FL_EMBOSSED_LABEL);
          recompute_covariance_interval_spinner->labelsize(10);
          recompute_covariance_interval_spinner->minimum(0);
          recompute_covariance_interval_spinner->maximum(200);
          recompute_covariance_interval_spinner->textsize(10);
          recompute_covariance_interval_spinner->callback((Fl_Callback*)cb_recompute_covariance_interval_spinner);
          recompute_covariance_interval_spinner->align(FL_ALIGN_RIGHT);
        } // Fl_Spinner* recompute_covariance_interval_spinner
        { hold_min_variance_button = new Fl_Light_Button(588, 590, 19, 22, "hold min var");
          hold_min_variance_button->tooltip("Hold minimum variance");
          hold_min_variance_button->box(FL_PLASTIC_ROUND_UP_BOX);
          hold_min_variance_button->color((Fl_Color)FL_BACKGROUND2_COLOR);
          hold_min_variance_button->selection_color((Fl_Color)2);
          hold_min_variance_button->labeltype(FL_EMBOSSED_LABEL);
          hold_min_variance_button->labelsize(10);
          hold_min_variance_button->callback((Fl_Callback*)cb_hold_min_variance_button);
          hold_min_variance_button->align(FL_ALIGN_LEFT);
        } // Fl_Light_Button* hold_min_variance_button
        { min_variance_spinner = new Fl_Spinner(610, 570, 66, 20, "min variance");
          min_variance_spinner->tooltip("Minimum Variance");
          min_variance_spinner->type(1);
          min_variance_spinner->labeltype(FL_EMBOSSED_LABEL);
          min_variance_spinner->labelsize(10);
          min_variance_spinner->minimum(0);
          min_variance_spinner->maximum(1e+010);
          min_variance_spinner->step(0.1);
          min_variance_spinner->value(100);
          min_variance_spinner->textsize(10);
          min_variance_spinner->callback((Fl_Callback*)cb_min_variance_spinner);
          min_variance_spinner->align(FL_ALIGN_RIGHT);
          min_variance_spinner->when(FL_WHEN_ENTER_KEY);
        } // Fl_Spinner* min_variance_spinner
        { correspondence_mode_choice = new Fl_Choice(490, 570, 120, 20, "Correspondence");
          correspondence_mode_choice->tooltip("Correspondence force type.");
          correspondence_mode_choice->box(FL_PLASTIC_ROUND_DOWN_BOX);
          correspondence_mode_choice->down_box(FL_PLASTIC_ROUND_UP_BOX);
          correspondence_mode_choice->labeltype(FL_EMBOSSED_LABEL);
          correspondence_mode_choice->labelsize(12);
          correspondence_mode_choice->textsize(12);
          correspondence_mode_choice->callback((Fl_Callback*)cb_correspondence_mode_choice);
          correspondence_mode_choice->when(FL_WHEN_CHANGED);
          correspondence_mode_choice->menu(menu_correspondence_mode_choice);
        } // Fl_Choice* correspondence_mode_choice
        { set_params_button = new Fl_Button(409, 564, 35, 25, "set");
          set_params_button->tooltip("Color map points.");
          set_params_button->box(FL_PLASTIC_ROUND_UP_BOX);
          set_params_button->down_box(FL_PLASTIC_ROUND_DOWN_BOX);
          set_params_button->color((Fl_Color)3);
          set_params_button->selection_color((Fl_Color)79);
          set_params_button->labeltype(FL_ENGRAVED_LABEL);
          set_params_button->labelsize(12);
          set_params_button->labelcolor((Fl_Color)FL_INACTIVE_COLOR);
          set_params_button->callback((Fl_Callback*)cb_set_params_button);
          set_params_button->hide();
          set_params_button->deactivate();
        } // Fl_Button* set_params_button
        { relative_energy_scaling_spinner = new Fl_Spinner(570, 690, 65, 20, "relative energy scaling");
          relative_energy_scaling_spinner->tooltip("Relative scaling of Correspondence to Sampling energy.");
          relative_energy_scaling_spinner->type(1);
          relative_energy_scaling_spinner->labeltype(FL_EMBOSSED_LABEL);
          relative_energy_scaling_spinner->labelsize(10);
          relative_energy_scaling_spinner->minimum(-10000);
          relative_energy_scaling_spinner->maximum(10000);
          relative_energy_scaling_spinner->step(0.1);
          relative_energy_scaling_spinner->textsize(10);
          relative_energy_scaling_spinner->callback((Fl_Callback*)cb_relative_energy_scaling_spinner);
          relative_energy_scaling_spinner->align(FL_ALIGN_RIGHT);
          relative_energy_scaling_spinner->hide();
          relative_energy_scaling_spinner->deactivate();
        } // Fl_Spinner* relative_energy_scaling_spinner
        { surface_gradmag = new Fl_Value_Output(455, 679, 50, 20, "average grad mag");
          surface_gradmag->labeltype(FL_EMBOSSED_LABEL);
          surface_gradmag->labelsize(10);
          surface_gradmag->minimum(-1e+030);
          surface_gradmag->maximum(1e+030);
          surface_gradmag->textsize(11);
        } // Fl_Value_Output* surface_gradmag
        { correspondence_gradmag = new Fl_Value_Output(513, 679, 50, 20, "avg grad mag");
          correspondence_gradmag->labeltype(FL_NO_LABEL);
          correspondence_gradmag->labelsize(10);
          correspondence_gradmag->minimum(-1e+030);
          correspondence_gradmag->maximum(1e+030);
          correspondence_gradmag->textsize(11);
        } // Fl_Value_Output* correspondence_gradmag
        { surface_energy = new Fl_Value_Output(455, 702, 50, 20, "average energy");
          surface_energy->labeltype(FL_EMBOSSED_LABEL);
          surface_energy->labelsize(10);
          surface_energy->minimum(-1e+030);
          surface_energy->maximum(1e+030);
          surface_energy->textsize(11);
        } // Fl_Value_Output* surface_energy
        { correspondence_energy = new Fl_Value_Output(513, 702, 50, 20, "average energy");
          correspondence_energy->labeltype(FL_NO_LABEL);
          correspondence_energy->labelsize(10);
          correspondence_energy->minimum(-1e+030);
          correspondence_energy->maximum(1e+030);
          correspondence_energy->textsize(11);
        } // Fl_Value_Output* correspondence_energy
        { Fl_Box* o = new Fl_Box(458, 660, 43, 17, "surface");
          o->labeltype(FL_EMBOSSED_LABEL);
          o->labelsize(11);
          o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(513, 660, 86, 17, "correspondence");
          o->labeltype(FL_EMBOSSED_LABEL);
          o->labelsize(11);
          o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
        } // Fl_Box* o
        { regression_interval_spinner = new Fl_Spinner(610, 612, 65, 18, "regress interv");
          regression_interval_spinner->tooltip("Regression interval");
          regression_interval_spinner->labeltype(FL_EMBOSSED_LABEL);
          regression_interval_spinner->labelsize(10);
          regression_interval_spinner->minimum(0);
          regression_interval_spinner->maximum(200);
          regression_interval_spinner->textsize(10);
          regression_interval_spinner->callback((Fl_Callback*)cb_regression_interval_spinner);
          regression_interval_spinner->align(FL_ALIGN_RIGHT);
        } // Fl_Spinner* regression_interval_spinner
        { initial_min_variance_spinner = new Fl_Spinner(370, 602, 66, 20, "initial min variance");
          initial_min_variance_spinner->tooltip("Minimum Variance");
          initial_min_variance_spinner->type(1);
          initial_min_variance_spinner->labeltype(FL_EMBOSSED_LABEL);
          initial_min_variance_spinner->labelsize(10);
          initial_min_variance_spinner->minimum(0);
          initial_min_variance_spinner->maximum(1e+010);
          initial_min_variance_spinner->step(0.001);
          initial_min_variance_spinner->value(100);
          initial_min_variance_spinner->textsize(10);
          initial_min_variance_spinner->callback((Fl_Callback*)cb_initial_min_variance_spinner);
          initial_min_variance_spinner->align(FL_ALIGN_RIGHT);
          initial_min_variance_spinner->when(FL_WHEN_ENTER_KEY);
        } // Fl_Spinner* initial_min_variance_spinner
        { final_min_variance_spinner = new Fl_Spinner(370, 623, 66, 17, "final min variance");
          final_min_variance_spinner->tooltip("Minimum Variance");
          final_min_variance_spinner->type(1);
          final_min_variance_spinner->labeltype(FL_EMBOSSED_LABEL);
          final_min_variance_spinner->labelsize(10);
          final_min_variance_spinner->minimum(0);
          final_min_variance_spinner->maximum(1e+010);
          final_min_variance_spinner->step(0.0001);
          final_min_variance_spinner->value(0.1);
          final_min_variance_spinner->textsize(10);
          final_min_variance_spinner->callback((Fl_Callback*)cb_final_min_variance_spinner);
          final_min_variance_spinner->align(FL_ALIGN_RIGHT);
          final_min_variance_spinner->when(FL_WHEN_ENTER_KEY);
        } // Fl_Spinner* final_min_variance_spinner
        { min_variance_decay_iterations = new Fl_Spinner(370, 640, 66, 20, "min var total decay iterations");
          min_variance_decay_iterations->tooltip("Minimum Variance");
          min_variance_decay_iterations->type(1);
          min_variance_decay_iterations->labeltype(FL_EMBOSSED_LABEL);
          min_variance_decay_iterations->labelsize(10);
          min_variance_decay_iterations->minimum(0);
          min_variance_decay_iterations->maximum(1e+010);
          min_variance_decay_iterations->value(200);
          min_variance_decay_iterations->textsize(10);
          min_variance_decay_iterations->callback((Fl_Callback*)cb_min_variance_decay_iterations);
          min_variance_decay_iterations->align(FL_ALIGN_RIGHT);
          min_variance_decay_iterations->when(FL_WHEN_ENTER_KEY);
        } // Fl_Spinner* min_variance_decay_iterations
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(378, 521, 230, 168, "Optimization");
        o->labeltype(FL_EMBOSSED_LABEL);
        o->labelsize(12);
        o->hide();
        { checkpointing_toggle = new Fl_Light_Button(379, 595, 126, 25, "checkpointing");
          checkpointing_toggle->tooltip("Toggle checkpointing");
          checkpointing_toggle->box(FL_PLASTIC_ROUND_UP_BOX);
          checkpointing_toggle->down_box(FL_PLASTIC_ROUND_DOWN_BOX);
          checkpointing_toggle->color((Fl_Color)FL_BACKGROUND2_COLOR);
          checkpointing_toggle->selection_color((Fl_Color)2);
          checkpointing_toggle->labeltype(FL_EMBOSSED_LABEL);
          checkpointing_toggle->labelsize(12);
        } // Fl_Light_Button* checkpointing_toggle
        { optimization_mode_choice = new Fl_Choice(379, 536, 221, 24, "algorithm");
          optimization_mode_choice->tooltip("Optimization algorithm.");
          optimization_mode_choice->down_box(FL_PLASTIC_ROUND_DOWN_BOX);
          optimization_mode_choice->labeltype(FL_EMBOSSED_LABEL);
          optimization_mode_choice->labelsize(12);
          optimization_mode_choice->textsize(12);
          optimization_mode_choice->callback((Fl_Callback*)cb_optimization_mode_choice);
          optimization_mode_choice->align(FL_ALIGN_RIGHT);
          optimization_mode_choice->when(FL_WHEN_CHANGED);
          optimization_mode_choice->menu(menu_optimization_mode_choice);
        } // Fl_Choice* optimization_mode_choice
        { time_step_spinner = new Fl_Spinner(381, 570, 71, 22, "global time step");
          time_step_spinner->tooltip("The timestep of the solver.");
          time_step_spinner->type(1);
          time_step_spinner->labeltype(FL_EMBOSSED_LABEL);
          time_step_spinner->labelsize(12);
          time_step_spinner->minimum(0);
          time_step_spinner->maximum(1e+020);
          time_step_spinner->step(0.01);
          time_step_spinner->textsize(12);
          time_step_spinner->callback((Fl_Callback*)cb_time_step_spinner);
          time_step_spinner->align(FL_ALIGN_RIGHT);
        } // Fl_Spinner* time_step_spinner
        { toggle_constraints_button = new Fl_Light_Button(378, 625, 126, 25, "use domain constraints");
          toggle_constraints_button->tooltip("Enable/Disable domain constraints");
          toggle_constraints_button->box(FL_PLASTIC_ROUND_UP_BOX);
          toggle_constraints_button->down_box(FL_PLASTIC_ROUND_DOWN_BOX);
          toggle_constraints_button->color((Fl_Color)FL_BACKGROUND2_COLOR);
          toggle_constraints_button->selection_color((Fl_Color)2);
          toggle_constraints_button->labeltype(FL_EMBOSSED_LABEL);
          toggle_constraints_button->labelsize(12);
          toggle_constraints_button->callback((Fl_Callback*)cb_toggle_constraints_button);
        } // Fl_Light_Button* toggle_constraints_button
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(379, 532, 331, 189, "Splitting");
        o->labeltype(FL_EMBOSSED_LABEL);
        o->labelsize(12);
        o->hide();
        { split_button = new Fl_Button(384, 558, 60, 30, "split all");
          split_button->tooltip("Quit the application.");
          split_button->box(FL_PLASTIC_ROUND_UP_BOX);
          split_button->down_box(FL_PLASTIC_ROUND_DOWN_BOX);
          split_button->color((Fl_Color)3);
          split_button->selection_color((Fl_Color)3);
          split_button->labeltype(FL_ENGRAVED_LABEL);
          split_button->callback((Fl_Callback*)cb_split_button);
        } // Fl_Button* split_button
        { split_radius_spinner = new Fl_Spinner(384, 532, 80, 24, "new particle distance");
          split_radius_spinner->tooltip("Distance the new particle is split from the old.");
          split_radius_spinner->type(1);
          split_radius_spinner->labeltype(FL_EMBOSSED_LABEL);
          split_radius_spinner->labelsize(10);
          split_radius_spinner->minimum(0.01);
          split_radius_spinner->maximum(20);
          split_radius_spinner->step(0.01);
          split_radius_spinner->textsize(10);
          split_radius_spinner->align(FL_ALIGN_RIGHT);
        } // Fl_Spinner* split_radius_spinner
        { split_one_button = new Fl_Button(454, 563, 55, 20, "split last");
          split_one_button->tooltip("Quit the application.");
          split_one_button->box(FL_PLASTIC_ROUND_UP_BOX);
          split_one_button->down_box(FL_PLASTIC_ROUND_DOWN_BOX);
          split_one_button->color((Fl_Color)3);
          split_one_button->selection_color((Fl_Color)3);
          split_one_button->labeltype(FL_ENGRAVED_LABEL);
          split_one_button->labelsize(12);
          split_one_button->callback((Fl_Callback*)cb_split_one_button);
        } // Fl_Button* split_one_button
        { auto_initialize_button = new Fl_Button(384, 638, 95, 20, "start auto init");
          auto_initialize_button->tooltip("Quit the application.");
          auto_initialize_button->box(FL_PLASTIC_ROUND_UP_BOX);
          auto_initialize_button->down_box(FL_PLASTIC_ROUND_DOWN_BOX);
          auto_initialize_button->color((Fl_Color)3);
          auto_initialize_button->selection_color((Fl_Color)3);
          auto_initialize_button->labeltype(FL_ENGRAVED_LABEL);
          auto_initialize_button->labelsize(12);
          auto_initialize_button->callback((Fl_Callback*)cb_auto_initialize_button);
          auto_initialize_button->deactivate();
        } // Fl_Button* auto_initialize_button
        { split_interval_spinner = new Fl_Spinner(384, 614, 80, 19, "split interval");
          split_interval_spinner->tooltip("Split interval for auto init");
          split_interval_spinner->labeltype(FL_EMBOSSED_LABEL);
          split_interval_spinner->labelsize(10);
          split_interval_spinner->maximum(20000);
          split_interval_spinner->value(100);
          split_interval_spinner->textsize(10);
          split_interval_spinner->align(FL_ALIGN_RIGHT);
          split_interval_spinner->deactivate();
        } // Fl_Spinner* split_interval_spinner
        { cancel_auto_initialize_button = new Fl_Light_Button(484, 638, 110, 20, "cancel auto init");
          cancel_auto_initialize_button->tooltip("Cancel Autoinitialize");
          cancel_auto_initialize_button->box(FL_PLASTIC_ROUND_UP_BOX);
          cancel_auto_initialize_button->down_box(FL_PLASTIC_ROUND_DOWN_BOX);
          cancel_auto_initialize_button->color((Fl_Color)FL_BACKGROUND2_COLOR);
          cancel_auto_initialize_button->selection_color((Fl_Color)2);
          cancel_auto_initialize_button->labeltype(FL_EMBOSSED_LABEL);
          cancel_auto_initialize_button->labelsize(12);
          cancel_auto_initialize_button->deactivate();
        } // Fl_Light_Button* cancel_auto_initialize_button
        { init_count_spinner = new Fl_Spinner(384, 590, 80, 19, "auto init total");
          init_count_spinner->tooltip("Total number of particles for initialization");
          init_count_spinner->labeltype(FL_EMBOSSED_LABEL);
          init_count_spinner->labelsize(10);
          init_count_spinner->maximum(9e+008);
          init_count_spinner->value(1024);
          init_count_spinner->textsize(10);
          init_count_spinner->align(FL_ALIGN_RIGHT);
          init_count_spinner->deactivate();
        } // Fl_Spinner* init_count_spinner
        { add_point_button = new Fl_Button(385, 665, 95, 20, "add point");
          add_point_button->tooltip("Add a single point to all surfaces.");
          add_point_button->box(FL_PLASTIC_ROUND_UP_BOX);
          add_point_button->down_box(FL_PLASTIC_ROUND_DOWN_BOX);
          add_point_button->color((Fl_Color)3);
          add_point_button->selection_color((Fl_Color)3);
          add_point_button->labeltype(FL_ENGRAVED_LABEL);
          add_point_button->callback((Fl_Callback*)cb_add_point_button);
        } // Fl_Button* add_point_button
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(375, 536, 152, 124, "Numerical");
        o->labeltype(FL_EMBOSSED_LABEL);
        o->labelsize(12);
        o->hide();
        { cutoff_spinner = new Fl_Spinner(379, 536, 55, 21, "cutoff");
          cutoff_spinner->tooltip("Flat cutoff for normal differences");
          cutoff_spinner->type(1);
          cutoff_spinner->labeltype(FL_EMBOSSED_LABEL);
          cutoff_spinner->labelsize(12);
          cutoff_spinner->minimum(0);
          cutoff_spinner->maximum(2);
          cutoff_spinner->step(0.01);
          cutoff_spinner->value(0.3);
          cutoff_spinner->textsize(12);
          cutoff_spinner->align(FL_ALIGN_RIGHT);
        } // Fl_Spinner* cutoff_spinner
        { ratio_spinner = new Fl_Spinner(379, 592, 55, 21, "ratio");
          ratio_spinner->tooltip("Ratio of neighborhood size to sigma.");
          ratio_spinner->type(1);
          ratio_spinner->labeltype(FL_EMBOSSED_LABEL);
          ratio_spinner->labelsize(12);
          ratio_spinner->minimum(0.1);
          ratio_spinner->maximum(20);
          ratio_spinner->step(0.01);
          ratio_spinner->value(3);
          ratio_spinner->textsize(12);
          ratio_spinner->align(FL_ALIGN_RIGHT);
        } // Fl_Spinner* ratio_spinner
        { normal_sigma_spinner = new Fl_Spinner(380, 564, 55, 21, "normal sigma");
          normal_sigma_spinner->tooltip("Set the fixed normal sigma parameter.");
          normal_sigma_spinner->type(1);
          normal_sigma_spinner->labeltype(FL_EMBOSSED_LABEL);
          normal_sigma_spinner->labelsize(12);
          normal_sigma_spinner->minimum(0);
          normal_sigma_spinner->maximum(5);
          normal_sigma_spinner->step(0.01);
          normal_sigma_spinner->value(0.2);
          normal_sigma_spinner->textsize(12);
          normal_sigma_spinner->align(FL_ALIGN_RIGHT);
        } // Fl_Spinner* normal_sigma_spinner
        { toggle_domain_lock_button = new Fl_Light_Button(375, 630, 90, 30, "lock shape 0");
          toggle_domain_lock_button->tooltip("Lock/Unlock this domain for optimization");
          toggle_domain_lock_button->box(FL_PLASTIC_ROUND_UP_BOX);
          toggle_domain_lock_button->color((Fl_Color)FL_BACKGROUND2_COLOR);
          toggle_domain_lock_button->selection_color((Fl_Color)2);
          toggle_domain_lock_button->labeltype(FL_EMBOSSED_LABEL);
          toggle_domain_lock_button->labelsize(10);
          toggle_domain_lock_button->callback((Fl_Callback*)cb_toggle_domain_lock_button);
        } // Fl_Light_Button* toggle_domain_lock_button
        o->end();
      } // Fl_Group* o
      parameter_tabs->end();
    } // Fl_Tabs* parameter_tabs
    { Fl_Tabs* o = new Fl_Tabs(180, 505, 175, 225, "Main Tabs");
      o->box(FL_PLASTIC_DOWN_BOX);
      o->labeltype(FL_NO_LABEL);
      o->labelsize(12);
      o->align(66);
      { Fl_Group* o = new Fl_Group(180, 526, 175, 199, "Controls");
        o->labeltype(FL_EMBOSSED_LABEL);
        o->labelsize(12);
        o->align(65);
        { optimize_start_button = new Fl_Button(285, 526, 55, 34, "start");
          optimize_start_button->tooltip("Quit the application.");
          optimize_start_button->box(FL_PLASTIC_ROUND_UP_BOX);
          optimize_start_button->down_box(FL_PLASTIC_ROUND_DOWN_BOX);
          optimize_start_button->color((Fl_Color)3);
          optimize_start_button->selection_color((Fl_Color)3);
          optimize_start_button->labeltype(FL_ENGRAVED_LABEL);
          optimize_start_button->labelsize(18);
          optimize_start_button->callback((Fl_Callback*)cb_optimize_start_button);
        } // Fl_Button* optimize_start_button
        { optimize_stop_button = new Fl_Button(285, 565, 55, 35, "stop");
          optimize_stop_button->tooltip("Quit the application.");
          optimize_stop_button->box(FL_PLASTIC_ROUND_UP_BOX);
          optimize_stop_button->down_box(FL_PLASTIC_ROUND_DOWN_BOX);
          optimize_stop_button->color((Fl_Color)3);
          optimize_stop_button->selection_color((Fl_Color)3);
          optimize_stop_button->labeltype(FL_ENGRAVED_LABEL);
          optimize_stop_button->labelsize(18);
          optimize_stop_button->callback((Fl_Callback*)cb_optimize_stop_button);
        } // Fl_Button* optimize_stop_button
        { run_single_iteration = new Fl_Button(285, 605, 55, 35, "step");
          run_single_iteration->tooltip("Quit the application.");
          run_single_iteration->box(FL_PLASTIC_ROUND_UP_BOX);
          run_single_iteration->down_box(FL_PLASTIC_ROUND_DOWN_BOX);
          run_single_iteration->color((Fl_Color)3);
          run_single_iteration->selection_color((Fl_Color)3);
          run_single_iteration->labeltype(FL_ENGRAVED_LABEL);
          run_single_iteration->labelsize(18);
          run_single_iteration->callback((Fl_Callback*)cb_run_single_iteration);
        } // Fl_Button* run_single_iteration
        { iterations_window = new Fl_Value_Output(186, 563, 89, 15, "total iterations count");
          iterations_window->tooltip("Elapsed Iterations");
          iterations_window->box(FL_PLASTIC_ROUND_DOWN_BOX);
          iterations_window->color((Fl_Color)FL_BACKGROUND2_COLOR);
          iterations_window->labeltype(FL_EMBOSSED_LABEL);
          iterations_window->labelsize(10);
          iterations_window->maximum(0);
          iterations_window->step(1);
          iterations_window->textsize(10);
          iterations_window->textcolor((Fl_Color)176);
          iterations_window->align(FL_ALIGN_BOTTOM);
        } // Fl_Value_Output* iterations_window
        { iteration_clock = new Fl_Clock(185, 606, 90, 88);
          iteration_clock->box(FL_PLASTIC_ROUND_DOWN_BOX);
          iteration_clock->color((Fl_Color)10);
          iteration_clock->selection_color((Fl_Color)1);
        } // Fl_Clock* iteration_clock
        { samples_output = new Fl_Value_Output(186, 530, 89, 19, "total particle count");
          samples_output->box(FL_PLASTIC_ROUND_DOWN_BOX);
          samples_output->color((Fl_Color)FL_BACKGROUND2_COLOR);
          samples_output->labeltype(FL_EMBOSSED_LABEL);
          samples_output->labelsize(10);
          samples_output->maximum(0);
          samples_output->step(1);
          samples_output->textsize(10);
          samples_output->textcolor((Fl_Color)4);
          samples_output->align(FL_ALIGN_BOTTOM_LEFT);
        } // Fl_Value_Output* samples_output
        { run_procrustes_button = new Fl_Button(278, 648, 65, 37, "run procrustes");
          run_procrustes_button->tooltip("Run a procrustes registration on all domains.");
          run_procrustes_button->box(FL_PLASTIC_ROUND_UP_BOX);
          run_procrustes_button->down_box(FL_PLASTIC_ROUND_DOWN_BOX);
          run_procrustes_button->color((Fl_Color)3);
          run_procrustes_button->selection_color((Fl_Color)3);
          run_procrustes_button->labeltype(FL_ENGRAVED_LABEL);
          run_procrustes_button->labelsize(12);
          run_procrustes_button->callback((Fl_Callback*)cb_run_procrustes_button);
          run_procrustes_button->align(FL_ALIGN_WRAP|FL_ALIGN_INSIDE);
        } // Fl_Button* run_procrustes_button
        { Fl_Button* o = new Fl_Button(190, 703, 40, 22, "exit");
          o->tooltip("Quit the application.");
          o->box(FL_PLASTIC_ROUND_UP_BOX);
          o->down_box(FL_PLASTIC_ROUND_DOWN_BOX);
          o->color((Fl_Color)1);
          o->selection_color((Fl_Color)3);
          o->labeltype(FL_ENGRAVED_LABEL);
          o->labelcolor((Fl_Color)FL_INACTIVE_COLOR);
          o->callback((Fl_Callback*)cb_exit);
        } // Fl_Button* o
        { use_procrustes_scaling_button = new Fl_Light_Button(310, 693, 19, 22, "Use scaling");
          use_procrustes_scaling_button->tooltip("Hold minimum variance");
          use_procrustes_scaling_button->box(FL_PLASTIC_ROUND_UP_BOX);
          use_procrustes_scaling_button->color((Fl_Color)FL_BACKGROUND2_COLOR);
          use_procrustes_scaling_button->selection_color((Fl_Color)2);
          use_procrustes_scaling_button->labeltype(FL_EMBOSSED_LABEL);
          use_procrustes_scaling_button->labelsize(10);
          use_procrustes_scaling_button->callback((Fl_Callback*)cb_use_procrustes_scaling_button);
          use_procrustes_scaling_button->align(FL_ALIGN_LEFT);
        } // Fl_Light_Button* use_procrustes_scaling_button
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(185, 530, 165, 150, "Points IO");
        o->labeltype(FL_EMBOSSED_LABEL);
        o->labelsize(12);
        o->align(65);
        o->hide();
        { WritePointsButton = new Fl_Button(190, 580, 90, 25, "write points");
          WritePointsButton->tooltip("Write point files.");
          WritePointsButton->box(FL_PLASTIC_ROUND_UP_BOX);
          WritePointsButton->down_box(FL_PLASTIC_ROUND_DOWN_BOX);
          WritePointsButton->color((Fl_Color)3);
          WritePointsButton->selection_color((Fl_Color)3);
          WritePointsButton->labeltype(FL_ENGRAVED_LABEL);
          WritePointsButton->callback((Fl_Callback*)cb_WritePointsButton);
          WritePointsButton->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
        } // Fl_Button* WritePointsButton
        { pointfile_prefix_input = new Fl_Input(185, 530, 155, 20, "point file prefix");
          pointfile_prefix_input->tooltip("Point file name prefix.");
          pointfile_prefix_input->box(FL_PLASTIC_ROUND_DOWN_BOX);
          pointfile_prefix_input->labeltype(FL_EMBOSSED_LABEL);
          pointfile_prefix_input->labelsize(12);
          pointfile_prefix_input->textsize(12);
          pointfile_prefix_input->align(FL_ALIGN_BOTTOM_LEFT);
        } // Fl_Input* pointfile_prefix_input
        { WriteModesButton = new Fl_Button(190, 610, 90, 25, "write modes");
          WriteModesButton->tooltip("Write mode files.");
          WriteModesButton->box(FL_PLASTIC_ROUND_UP_BOX);
          WriteModesButton->down_box(FL_PLASTIC_ROUND_DOWN_BOX);
          WriteModesButton->color((Fl_Color)3);
          WriteModesButton->selection_color((Fl_Color)3);
          WriteModesButton->labeltype(FL_ENGRAVED_LABEL);
          WriteModesButton->callback((Fl_Callback*)cb_WriteModesButton);
          WriteModesButton->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
        } // Fl_Button* WriteModesButton
        { number_of_modes_spinner = new Fl_Spinner(285, 612, 30, 18, "number");
          number_of_modes_spinner->tooltip("Number of modes to write.");
          number_of_modes_spinner->labeltype(FL_EMBOSSED_LABEL);
          number_of_modes_spinner->labelsize(12);
          number_of_modes_spinner->minimum(0);
          number_of_modes_spinner->maximum(200);
          number_of_modes_spinner->value(5);
          number_of_modes_spinner->textsize(12);
          number_of_modes_spinner->align(FL_ALIGN_BOTTOM_LEFT);
        } // Fl_Spinner* number_of_modes_spinner
        { WriteParamtersButton = new Fl_Button(190, 645, 90, 25, "write params");
          WriteParamtersButton->tooltip("Write regression parameters");
          WriteParamtersButton->box(FL_PLASTIC_ROUND_UP_BOX);
          WriteParamtersButton->down_box(FL_PLASTIC_ROUND_DOWN_BOX);
          WriteParamtersButton->color((Fl_Color)3);
          WriteParamtersButton->selection_color((Fl_Color)3);
          WriteParamtersButton->labeltype(FL_ENGRAVED_LABEL);
          WriteParamtersButton->callback((Fl_Callback*)cb_WriteParamtersButton);
          WriteParamtersButton->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
        } // Fl_Button* WriteParamtersButton
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(180, 529, 165, 186, "Transf. IO");
        o->labeltype(FL_EMBOSSED_LABEL);
        o->labelsize(12);
        o->align(65);
        o->hide();
        { transform_filename_input = new Fl_Input(185, 529, 150, 20, "transform file name");
          transform_filename_input->tooltip("Transform File Name");
          transform_filename_input->box(FL_PLASTIC_ROUND_DOWN_BOX);
          transform_filename_input->labeltype(FL_EMBOSSED_LABEL);
          transform_filename_input->labelsize(12);
          transform_filename_input->textsize(12);
          transform_filename_input->align(FL_ALIGN_BOTTOM_LEFT);
        } // Fl_Input* transform_filename_input
        { WriteTransformButton = new Fl_Button(185, 604, 115, 25, "write transforms");
          WriteTransformButton->tooltip("Write transform file.");
          WriteTransformButton->box(FL_PLASTIC_ROUND_UP_BOX);
          WriteTransformButton->down_box(FL_PLASTIC_ROUND_DOWN_BOX);
          WriteTransformButton->color((Fl_Color)3);
          WriteTransformButton->selection_color((Fl_Color)3);
          WriteTransformButton->labeltype(FL_EMBOSSED_LABEL);
          WriteTransformButton->callback((Fl_Callback*)cb_WriteTransformButton);
          WriteTransformButton->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
        } // Fl_Button* WriteTransformButton
        { ReadTransformButton = new Fl_Button(185, 569, 115, 25, "read transforms");
          ReadTransformButton->tooltip("Read  transform file.");
          ReadTransformButton->box(FL_PLASTIC_ROUND_UP_BOX);
          ReadTransformButton->down_box(FL_PLASTIC_ROUND_DOWN_BOX);
          ReadTransformButton->color((Fl_Color)3);
          ReadTransformButton->selection_color((Fl_Color)3);
          ReadTransformButton->labeltype(FL_EMBOSSED_LABEL);
          ReadTransformButton->callback((Fl_Callback*)cb_ReadTransformButton);
          ReadTransformButton->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
        } // Fl_Button* ReadTransformButton
        o->end();
      } // Fl_Group* o
      { image_information = new Fl_Text_Display(185, 520, 155, 189, "Info");
        image_information->box(FL_NO_BOX);
        image_information->selection_color((Fl_Color)FL_BACKGROUND2_COLOR);
        image_information->labeltype(FL_EMBOSSED_LABEL);
        image_information->labelsize(12);
        image_information->textsize(10);
        image_information->textcolor((Fl_Color)FL_GRAY0);
        image_information->align(69);
        image_information->when(FL_WHEN_NEVER);
        image_information->hide();
      } // Fl_Text_Display* image_information
      o->end();
    } // Fl_Tabs* o
    { visualization_tabs = new Fl_Tabs(5, 505, 170, 225);
      visualization_tabs->box(FL_PLASTIC_DOWN_BOX);
      { Fl_Group* o = new Fl_Group(5, 521, 170, 207, "Visualization");
        o->labeltype(FL_EMBOSSED_LABEL);
        o->labelsize(12);
        { SurfaceOpacity = new Fl_Roller(154, 539, 15, 110, "surface opacity");
          SurfaceOpacity->box(FL_PLASTIC_THIN_UP_BOX);
          SurfaceOpacity->color((Fl_Color)193);
          SurfaceOpacity->labeltype(FL_EMBOSSED_LABEL);
          SurfaceOpacity->labelsize(12);
          SurfaceOpacity->labelcolor((Fl_Color)FL_INACTIVE_COLOR);
          SurfaceOpacity->step(0.01);
          SurfaceOpacity->value(1);
          SurfaceOpacity->callback((Fl_Callback*)cb_SurfaceOpacity);
          SurfaceOpacity->align(138);
        } // Fl_Roller* SurfaceOpacity
        { selected_particle_spinner = new Fl_Spinner(10, 577, 40, 17, "visualize point");
          selected_particle_spinner->tooltip("Visualize point.");
          selected_particle_spinner->labeltype(FL_EMBOSSED_LABEL);
          selected_particle_spinner->labelsize(12);
          selected_particle_spinner->minimum(0);
          selected_particle_spinner->maximum(5000);
          selected_particle_spinner->textsize(12);
          selected_particle_spinner->callback((Fl_Callback*)cb_selected_particle_spinner);
          selected_particle_spinner->align(FL_ALIGN_RIGHT);
          selected_particle_spinner->when(FL_WHEN_CHANGED);
        } // Fl_Spinner* selected_particle_spinner
        { neighborhood_size_spinner = new Fl_Spinner(10, 592, 40, 17, "neighbor. sz");
          neighborhood_size_spinner->tooltip("Visualize radius around point.");
          neighborhood_size_spinner->type(1);
          neighborhood_size_spinner->labeltype(FL_EMBOSSED_LABEL);
          neighborhood_size_spinner->labelsize(12);
          neighborhood_size_spinner->minimum(0);
          neighborhood_size_spinner->maximum(1000);
          neighborhood_size_spinner->step(0.5);
          neighborhood_size_spinner->textsize(12);
          neighborhood_size_spinner->callback((Fl_Callback*)cb_neighborhood_size_spinner);
          neighborhood_size_spinner->align(FL_ALIGN_RIGHT);
          neighborhood_size_spinner->when(FL_WHEN_CHANGED);
        } // Fl_Spinner* neighborhood_size_spinner
        { glyph_scale_spinner = new Fl_Spinner(10, 617, 45, 22, "glyph size");
          glyph_scale_spinner->tooltip("Set Glyph scale");
          glyph_scale_spinner->type(1);
          glyph_scale_spinner->labeltype(FL_EMBOSSED_LABEL);
          glyph_scale_spinner->labelsize(12);
          glyph_scale_spinner->maximum(20);
          glyph_scale_spinner->step(0.5);
          glyph_scale_spinner->value(3);
          glyph_scale_spinner->textsize(12);
          glyph_scale_spinner->callback((Fl_Callback*)cb_glyph_scale_spinner);
          glyph_scale_spinner->align(FL_ALIGN_RIGHT);
        } // Fl_Spinner* glyph_scale_spinner
        { color_map_glyphs_button = new Fl_Button(10, 652, 95, 27, "recolor glyphs");
          color_map_glyphs_button->tooltip("Color map points.");
          color_map_glyphs_button->box(FL_PLASTIC_ROUND_UP_BOX);
          color_map_glyphs_button->down_box(FL_PLASTIC_ROUND_DOWN_BOX);
          color_map_glyphs_button->color((Fl_Color)3);
          color_map_glyphs_button->selection_color((Fl_Color)3);
          color_map_glyphs_button->labeltype(FL_EMBOSSED_LABEL);
          color_map_glyphs_button->labelsize(12);
          color_map_glyphs_button->labelcolor((Fl_Color)FL_INACTIVE_COLOR);
          color_map_glyphs_button->callback((Fl_Callback*)cb_color_map_glyphs_button);
        } // Fl_Button* color_map_glyphs_button
        { viewer1_domain_spinner = new Fl_Spinner(25, 533, 75, 22, "SHAPE NUMBER");
          viewer1_domain_spinner->tooltip("Select Domain for Viewer 1");
          viewer1_domain_spinner->labeltype(FL_EMBOSSED_LABEL);
          viewer1_domain_spinner->labelsize(12);
          viewer1_domain_spinner->minimum(0);
          viewer1_domain_spinner->maximum(5000);
          viewer1_domain_spinner->textsize(12);
          viewer1_domain_spinner->callback((Fl_Callback*)cb_viewer1_domain_spinner);
          viewer1_domain_spinner->align(FL_ALIGN_BOTTOM);
          viewer1_domain_spinner->when(FL_WHEN_ENTER_KEY);
        } // Fl_Spinner* viewer1_domain_spinner
        { viewer2_domain_spinner = new Fl_Spinner(65, 533, 45, 25, "right");
          viewer2_domain_spinner->tooltip("Select Domain for Viewer 1");
          viewer2_domain_spinner->labeltype(FL_EMBOSSED_LABEL);
          viewer2_domain_spinner->labelsize(12);
          viewer2_domain_spinner->minimum(0);
          viewer2_domain_spinner->maximum(5000);
          viewer2_domain_spinner->textsize(12);
          viewer2_domain_spinner->callback((Fl_Callback*)cb_viewer2_domain_spinner);
          viewer2_domain_spinner->align(FL_ALIGN_BOTTOM);
          viewer2_domain_spinner->when(FL_WHEN_ENTER_KEY);
          viewer2_domain_spinner->hide();
          viewer2_domain_spinner->deactivate();
        } // Fl_Spinner* viewer2_domain_spinner
        { frame_rate_spinner = new Fl_Spinner(11, 689, 44, 23, "max frame rate");
          frame_rate_spinner->tooltip("Select Domain for Viewer 1");
          frame_rate_spinner->type(1);
          frame_rate_spinner->labeltype(FL_EMBOSSED_LABEL);
          frame_rate_spinner->labelsize(12);
          frame_rate_spinner->minimum(0);
          frame_rate_spinner->maximum(5000);
          frame_rate_spinner->step(0.1);
          frame_rate_spinner->value(20);
          frame_rate_spinner->textsize(12);
          frame_rate_spinner->align(FL_ALIGN_RIGHT);
          frame_rate_spinner->when(FL_WHEN_ENTER_KEY);
        } // Fl_Spinner* frame_rate_spinner
        { viz_neighborhood_button = new Fl_Button(130, 574, 20, 26, "VZ");
          viz_neighborhood_button->tooltip("Visualize selected particle neighborhood");
          viz_neighborhood_button->box(FL_PLASTIC_ROUND_UP_BOX);
          viz_neighborhood_button->down_box(FL_PLASTIC_ROUND_DOWN_BOX);
          viz_neighborhood_button->color((Fl_Color)3);
          viz_neighborhood_button->selection_color((Fl_Color)3);
          viz_neighborhood_button->labeltype(FL_EMBOSSED_LABEL);
          viz_neighborhood_button->labelsize(12);
          viz_neighborhood_button->labelcolor((Fl_Color)FL_INACTIVE_COLOR);
          viz_neighborhood_button->callback((Fl_Callback*)cb_viz_neighborhood_button);
        } // Fl_Button* viz_neighborhood_button
        o->end();
      } // Fl_Group* o
      visualization_tabs->end();
    } // Fl_Tabs* visualization_tabs
    m_MainWindow->end();
    m_MainWindow->resizable(m_MainWindow);
  } // Fl_Double_Window* m_MainWindow
}

CorrespondenceGUI::~CorrespondenceGUI() {
}

void CorrespondenceGUI::Quit() {
}

void CorrespondenceGUI::Show() {
}

void CorrespondenceGUI::Hide() {
}

void CorrespondenceGUI::SetSurfaceOpacity() {
}

void CorrespondenceGUI::SetReferenceScale() {
}

void CorrespondenceGUI::WritePointsFile(const char *) {
}

void CorrespondenceGUI::optimize_start() {
}

void CorrespondenceGUI::optimize_stop() {
}

void CorrespondenceGUI::SetExperimental() {
}

void CorrespondenceGUI::ColorNeighborhood() {
}

void CorrespondenceGUI::VisualizeNeighborhood() {
}

void CorrespondenceGUI::SetNumericalParameter() {
}

void CorrespondenceGUI::SplitAllParticles() {
}

void CorrespondenceGUI::single_iteration() {
}

void CorrespondenceGUI::SetGlyphScale() {
}

void CorrespondenceGUI::SetAdaptivityMode() {
}

void CorrespondenceGUI::ViewerSelectDomain() {
}

void CorrespondenceGUI::ToggleCorrespondence() {
}

void CorrespondenceGUI::SetCorrespondenceMode() {
}

void CorrespondenceGUI::WritePointFiles() {
}

void CorrespondenceGUI::WriteModes() {
}

void CorrespondenceGUI::RecolorGlyphs() {
}

void CorrespondenceGUI::RunProcrustes() {
}

void CorrespondenceGUI::SplitParticle() {
}

void CorrespondenceGUI::ToggleDomainLock() {
}

void CorrespondenceGUI::ToggleSampling() {
}

void CorrespondenceGUI::AutoInitialize() {
}

void CorrespondenceGUI::WriteVTKMesh() {
}

void CorrespondenceGUI::WriteTransformFile() const {
}

void CorrespondenceGUI::ReadTransformFile() {
}

void CorrespondenceGUI::SetOptimizationMode() {
}

void CorrespondenceGUI::AddSinglePoint() {
}

void CorrespondenceGUI::AutoVisualizeNeighborhood() {
}

void CorrespondenceGUI::ToggleConstraints() {
}

void CorrespondenceGUI::WriteParameters() {
}

void CorrespondenceGUI::SetMinimumVarianceDecay() {
}
