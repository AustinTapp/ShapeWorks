PROJECT( ShapeWorksStudio )

cmake_minimum_required(VERSION 2.8)  


###########################################
# Flags for Microsoft Compiler
###########################################

IF (WIN32 AND MSVC)
  ADD_DEFINITIONS(-D_WIN32_WINNT=0x0501 -DNTDDI_VERSION=0x05010000)
#  ADD_DEFINITIONS(-D_WIN32_WINNT=0x0501)
  ADD_DEFINITIONS(-DPSAPI_VERSION=1)
  # Disable Visual C++ Secure Warnings
  ADD_DEFINITIONS(-D_SCL_SECURE_NO_WARNINGS)
  ADD_DEFINITIONS(-D_CRT_SECURE_NO_WARNINGS)
  ADD_DEFINITIONS(-D_BIND_TO_CURRENT_VCLIBS_VERSION=1)
  ADD_DEFINITIONS(-D_BIND_TO_CURRENT_CRT_VERSION=1)
  SET(CMAKE_CXX_FLAGS "/Oi ${CMAKE_CXX_FLAGS} /MP4")
ENDIF (WIN32 AND MSVC)


#Match everything when analyzing dependencies
INCLUDE_REGULAR_EXPRESSION("^.*$")
OPTION (BUILD_SHARED_LIBS "Build shared libraries" OFF)
OPTION (BUILD_TESTS "Build ShapeWorksStudio test applications." ON)
OPTION (INSTALL_TEST_FILES "Include ShapeWorksStudio test images and help files in the install." OFF)
OPTION (INSTALL_SOURCE  "Install ShapeWorksStudio source code." OFF)

set(CMAKE_BUILD_TYPE Release)

IF (WIN32 AND MSVC)
  ADD_DEFINITIONS(-D_SCL_SECURE_NO_WARNINGS)
  ADD_DEFINITIONS(-D_CRT_SECURE_NO_WARNINGS)
ENDIF (WIN32 AND MSVC)

FIND_PACKAGE(VTK COMPONENTS
  vtkCommonCore
  vtkGUISupportQt
)

INCLUDE( ${USE_VTK_FILE} )
MESSAGE(STATUS "** VTK_DIR: ${VTK_DIR}")
#MESSAGE(STATUS "** VTK_LIBRARIES: ${VTK_LIBRARIES}")

FIND_PACKAGE(ITK REQUIRED)
IF (ITK_FOUND)
  INCLUDE (${USE_ITK_FILE})
ENDIF(ITK_FOUND)
MESSAGE(STATUS "** ITK_DIR: ${ITK_DIR}")
#MESSAGE(STATUS "** ITK_LIBRARIES: ${ITK_LIBRARIES}")

#set( Boost_DEBUG TRUE )
#SET(CMAKE_INCLUDE_PATH ${CMAKE_INCLUDE_PATH} "/usr/local/include/boost")
#SET(CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH} "/usr/local/lib")
#set( Boost_USE_STATIC_LIBS ON )
#FIND_PACKAGE(Boost REQUIRED COMPONENTS system filesystem thread)
#link_directories ( ${Boost_LIBRARY_DIRS} )
#include_directories ( ${Boost_INCLUDE_DIRS} )

#MESSAGE(STATUS "** Boost Include: ${Boost_INCLUDE_DIR}")
#MESSAGE(STATUS "** Boost Libraries: ${Boost_LIBRARY_DIRS}")
#MESSAGE(STATUS "** Boost Libraries: ${Boost_LIBRARIES}")

SET(CMAKE_INCLUDE_CURRENT_DIR ON)

#ADD_DEFINITIONS( -Wall )

# by default only QtCore and QtGui modules are enabled
# other modules must be enabled like this:
SET( QT_USE_QT3SUPPORT TRUE )   
SET( QT_USE_QTXML TRUE )
SET( QT_USE_QTSVG TRUE )

#--------------------------------------------------------------------------------
# This sets the windows build that will need the special winmain@16 call. Qt provides
#  this for us in the qtmain.lib file. Using this cmake code will ensure we have it
#  linked into our build. Not needed on Unix/OS X/Linux which is why we have the 
#  IF(WIN32) conditional.
IF (WIN32)
    SET (QT_USE_QTMAIN TRUE)
ENDIF (WIN32)

# this command finds Qt4 libraries and sets all required variables
# note that it's Qt4, not QT4 or qt4
SET(QT_MIN_VERSION "4.7.4")
FIND_PACKAGE( Qt4 REQUIRED )

# add some useful macros and variables
# (QT_USE_FILE is a variable defined by FIND_PACKAGE( Qt4 ) that contains a path to CMake script)
INCLUDE( ${QT_USE_FILE} )

MESSAGE(STATUS "** QT_QMAKE_EXECUTABLE: ${QT_QMAKE_EXECUTABLE}")

# Instructs the MSVC toolset to use the precompiled header PRECOMPILED_HEADER
# for each source file given in the collection named by SOURCES.
function(enable_precompiled_headers PRECOMPILED_HEADER SOURCES)
  if(MSVC)
    set(files ${${SOURCES}})

    get_filename_component(pch_basename ${PRECOMPILED_HEADER} NAME_WE)
    set(pch_header ${CMAKE_CURRENT_SOURCE_DIR}/${PRECOMPILED_HEADER})
    set(pch_file ${CMAKE_CURRENT_BINARY_DIR}/${pch_basename}.cc)
    set_source_files_properties(${pch_file}  PROPERTIES COMPILE_FLAGS "/Yc\"${pch_header}\"")

    # Generate precompiled header translation unit
    IF(NOT EXISTS "${pch_file}")
      FILE(WRITE ${pch_file} "// Precompiled header unity generated by CMake\n")
      FILE(APPEND ${pch_file} "#include <${pch_header}>\n")
    ENDIF(NOT EXISTS "${pch_file}")

    # Update properties of source files to use the precompiled header.
    # Additionally, force the inclusion of the precompiled header at beginning of each source file.
    foreach(source_file ${files} )
      get_filename_component(extension ${source_file} EXT)
      if ("${extension}" STREQUAL ".cc")
        #message ("setting property on ${source_file}")
        set_source_files_properties(
          ${source_file}
          PROPERTIES COMPILE_FLAGS
          "/Yu\"${pch_header}\" /FI\"${pch_header}\""
          )
      endif("${extension}" STREQUAL ".cc")
    endforeach(source_file)

    # Finally, update the source file collection to contain the precompiled header translation unit
    set(${SOURCES} ${pch_file} ${${SOURCES}} PARENT_SCOPE)
  endif(MSVC)
endfunction(enable_precompiled_headers)



FILE(GLOB STUDIO_INTERFACE_HDRS "Interface/*.h")
FILE(GLOB STUDIO_INTERFACE_SRCS "Interface/*.cc")
FILE(GLOB STUDIO_INTERFACE_UIS  "Interface/*.ui")

FILE(GLOB STUDIO_UTILS_HDRS "Utils/*.h")
FILE(GLOB STUDIO_UTILS_SRCS "Utils/*.cc")

FILE(GLOB STUDIO_NETWORK_HDRS "Network/*.h")
FILE(GLOB STUDIO_NETWORK_SRCS "Network/*.cc")

FILE(GLOB STUDIO_APPLICATION_HDRS "Application/*.h")
FILE(GLOB STUDIO_APPLICATION_SRCS "Application/*.cc")

FILE(GLOB STUDIO_DATA_HDRS "Data/*.h")
FILE(GLOB STUDIO_DATA_SRCS "Data/*.cc")

FILE(GLOB STUDIO_VISUALIZATION_HDRS "Visualization/*.h")
FILE(GLOB STUDIO_VISUALIZATION_SRCS "Visualization/*.cc")

SET( STUDIO_SRCS
     main.cc
     ${STUDIO_INTERFACE_SRCS}
     ${STUDIO_UTILS_SRCS}
     ${STUDIO_NETWORK_SRCS}
     ${STUDIO_APPLICATION_SRCS}
     ${STUDIO_DATA_SRCS}
     ${STUDIO_VISUALIZATION_SRCS}
)

SET( STUDIO_HDRS
     ${STUDIO_INTERFACE_HDRS}
     ${STUDIO_UTILS_HDRS}
     ${STUDIO_NETWORK_HDRS}
     ${STUDIO_APPLICATION_HDRS}
     ${STUDIO_DATA_HDRS}
     ${STUDIO_VISUALIZATION_HDRS}
)

SET( STUDIO_RCS
     Resources/ShapeWorksStudio.qrc
)

SOURCE_GROUP("Interface" FILES ${STUDIO_INTERFACE_SRCS} ${STUDIO_INTERFACE_HDRS} ${STUDIO_INTERFACE_UIS})

SOURCE_GROUP("Utils" FILES ${STUDIO_UTILS_SRCS} ${STUDIO_UTILS_HDRS})
SOURCE_GROUP("Visualization" FILES ${STUDIO_VISUALIZATION_SRCS} ${STUDIO_VISUALIZATION_HDRS})
SOURCE_GROUP("Network" FILES ${STUDIO_NETWORK_SRCS} ${STUDIO_NETWORK_HDRS})
SOURCE_GROUP("Application" FILES ${STUDIO_APPLICATION_SRCS} ${STUDIO_APPLICATION_HDRS})
SOURCE_GROUP("Data" FILES ${STUDIO_DATA_SRCS} ${STUDIO_DATA_HDRS})


# Turn on precompiled headers
enable_precompiled_headers(PrefixHeader.h STUDIO_SRCS)



# this command will generate rules that will run rcc on all files from STUDIO_RCS
# in result STUDIO_RC_SRCS variable will contain paths to files produced by rcc
QT4_ADD_RESOURCES( STUDIO_RC_SRCS ${STUDIO_RCS} )

# this will run uic on .ui files:
QT4_WRAP_UI( STUDIO_UI_HDRS ${STUDIO_INTERFACE_UIS} )

# and finally this will run moc:
QT4_WRAP_CPP( STUDIO_MOC_SRCS ${STUDIO_INTERFACE_HDRS} )

# we need this to be able to include headers produced by uic in our code
# (CMAKE_BINARY_DIR holds a path to the build directory)
INCLUDE_DIRECTORIES( ${CMAKE_BINARY_DIR} )
#INCLUDE_DIRECTORIES( ${CMAKE_CURRENT_BINARY_DIR} )


# optionally build the test files
IF ( BUILD_TESTS )

  INCLUDE(CTest)
  ENABLE_TESTING()

  # ADD_TEST(QuantTest QuantTest "${CMAKE_CURRENT_SOURCE_DIR}")
  # ADD_EXECUTABLE(QuantTest test/quanttest.cc)
  # TARGET_LINK_LIBRARIES(QuantTest ${ITK_LIBRARIES})

  # ADD_TEST(HistTestNormal HistTestNormal "${CMAKE_CURRENT_SOURCE_DIR}")
  # ADD_EXECUTABLE(HistTestNormal test/histtest_normal.cc)
  # TARGET_LINK_LIBRARIES(HistTestNormal ${ITK_LIBRARIES})

  # ADD_TEST(HistTestMasked HistTestMasked "${CMAKE_CURRENT_SOURCE_DIR}")
  # ADD_EXECUTABLE(HistTestMasked test/histtest_masked.cc)
  # TARGET_LINK_LIBRARIES(HistTestMasked ${ITK_LIBRARIES})

  # ADD_TEST(HistTestThresholded HistTestThresholded "${CMAKE_CURRENT_SOURCE_DIR}")
  # ADD_EXECUTABLE(HistTestThresholded test/histtest_thresholded.cc)
  # TARGET_LINK_LIBRARIES(HistTestThresholded ${ITK_LIBRARIES})

  # ADD_TEST(HistTestMaskedThresholded HistTestMaskedThresholded "${CMAKE_CURRENT_SOURCE_DIR}")
  # ADD_EXECUTABLE(HistTestMaskedThresholded test/histtest_masked_thresholded.cc)
  # TARGET_LINK_LIBRARIES(HistTestMaskedThresholded ${ITK_LIBRARIES})

ENDIF(BUILD_TESTS)

# For Apple set the icns file containing icons
IF(APPLE)
  # set how it shows up in the Info.plist file
  SET(MACOSX_BUNDLE_ICON_FILE ShapeWorksStudio.icns) 
  # set where in the bundle to put the icns file
  SET_SOURCE_FILES_PROPERTIES(${CMAKE_CURRENT_SOURCE_DIR}/Resources/ShapeWorksStudio.icns PROPERTIES MACOSX_PACKAGE_LOCATION Resources)
  # include the icns file in the target
  SET(STUDIO_SRCS ${STUDIO_SRCS} ${CMAKE_CURRENT_SOURCE_DIR}/Resources/ShapeWorksStudio.icns)
ENDIF(APPLE)

IF(WIN32)
  SET(STUDIO_SRCS ${STUDIO_SRCS} ${CMAKE_CURRENT_SOURCE_DIR}/Resources/ShapeWorksStudio.rc)
ENDIF(WIN32)

if(MSVC)
  SOURCE_GROUP(moc_sources FILES ${STUDIO_MOC_SRCS})
endif(MSVC)


# here we instruct CMake to build STUDIO executable from all of the source files
ADD_EXECUTABLE( ShapeWorksStudio MACOSX_BUNDLE WIN32 
  ${STUDIO_SRCS}
  ${STUDIO_HDRS}
  ${STUDIO_MOC_SRCS} 
  ${STUDIO_RC_SRCS} 
  ${STUDIO_UI_HDRS} 
  ${STUDIO_MOC_HDRS}
  )

TARGET_LINK_LIBRARIES( ShapeWorksStudio
  ${QT_LIBRARIES} 
  ${ITK_LIBRARIES}
  ${Boost_THREAD_LIBRARY}
  ${Boost_SYSTEM_LIBRARY}
  ${Boost_FILESYSTEM_LIBRARY}
  ${VTK_LIBRARIES}
  )



# INSTALLATION AND PACKAGING
SET(plugin_dest_dir bin)
SET(qtconf_dest_dir bin)
SET(APPS "\${CMAKE_INSTALL_PREFIX}/bin/ShapeWorksStudio")
IF(APPLE)
  SET(plugin_dest_dir ShapeWorksStudio.app/Contents/MacOS)
  SET(qtconf_dest_dir ShapeWorksStudio.app/Contents/Resources)
  SET(contents_dest_dir ShapeWorksStudio.app/Contents)
  SET(APPS "\${CMAKE_INSTALL_PREFIX}/ShapeWorksStudio.app")
ENDIF(APPLE)
IF(WIN32)
  SET(APPS "\${CMAKE_INSTALL_PREFIX}/bin/ShapeWorksStudio.exe")
ENDIF(WIN32)



#--------------------------------------------------------------------------------
# Install the STUDIO application, on Apple, the bundle is at the root of the
# install tree, and on other platforms it'll go into the bin directory.
INSTALL(TARGETS ShapeWorksStudio
    BUNDLE DESTINATION . COMPONENT Runtime
    RUNTIME DESTINATION bin COMPONENT Runtime
    )

#--------------------------------------------------------------------------------
# Install needed Qt plugins by copying directories from the qt installation
# One can cull what gets copied by using 'REGEX "..." EXCLUDE'
INSTALL(DIRECTORY "${QT_PLUGINS_DIR}/imageformats" DESTINATION ${plugin_dest_dir}/plugins COMPONENT Runtime)

#--------------------------------------------------------------------------------
# Install needed Qt .nib files and others
IF(APPLE)
INSTALL(DIRECTORY "${QT_QTGUI_LIBRARY_RELEASE}/Versions/Current/Resources" DESTINATION ${contents_dest_dir} COMPONENT Runtime)
ENDIF(APPLE)



#--------------------------------------------------------------------------------
# install a qt.conf file
# this inserts some cmake code into the install script to write the file
INSTALL(CODE "
    file(WRITE \"\${CMAKE_INSTALL_PREFIX}/${qtconf_dest_dir}/qt.conf\" \"\")
    " COMPONENT Runtime)


#--------------------------------------------------------------------------------
# Use BundleUtilities to get all other dependencies for the application to work.
# It takes a bundle or executable along with possible plugins and inspects it
# for dependencies.  If they are not system dependencies, they are copied.

# directories to look for dependencies
SET(DIRS ${QT_LIBRARY_DIRS})

# Now the work of copying dependencies into the bundle/package
# The quotes are escaped and variables to use at install time have their $ escaped
# An alternative is the do a configure_file() on a script and use install(SCRIPT  ...).
# Note that the image plugins depend on QtSvg and QtXml, and it got those copied
# over.
INSTALL(CODE "
    file(GLOB_RECURSE QTPLUGINS
      \"\${CMAKE_INSTALL_PREFIX}/${plugin_dest_dir}/plugins/*${CMAKE_SHARED_LIBRARY_SUFFIX}\")
    include(BundleUtilities)
    fixup_bundle(\"${APPS}\" \"\${QTPLUGINS}\" \"${DIRS}\")
    " COMPONENT Runtime)


# To Create a package, one can run "cpack -G DragNDrop CPackConfig.cmake" on Mac OS X
# where CPackConfig.cmake is created by including CPack
# And then there's ways to customize this as well
set(CPACK_BINARY_DRAGNDROP ON)
include(CPack)


# Grab the source code files for installation
#IF(INSTALL_SOURCE)
# FILE(GLOB root_files "*.h" "*.txx" "*.cxx" "*.txt")
# INSTALL(FILES ${root_files}          DESTINATION source)
# FILE(GLOB test_files "test/*.h" "test/*.txx" "test/*.cxx" "test/*.txt")
# INSTALL(FILES ${test_files}          DESTINATION source/test)
#ENDIF(INSTALL_SOURCE)

INSTALL(FILES README.txt DESTINATION .)

# Install test images and help files in the bin directory
#IF (INSTALL_TEST_FILES)
#  SET(TEST_DATA   
#  list of files here ...
# )
#  INSTALL(FILES ${TEST_DATA} DESTINATION bin)
#ENDIF(INSTALL_TEST_FILES)



# Install the necessary shared ITK Dlls
# TODO: Assumes the install or package is a Release build.  Need to add logic
# to find debug vs shared builds and switch on Mac or Windows.s 
#IF (BUILD_SHARED_LIBS)
#  INSTALL(FILES ${ITK_LIBRARY_DIRS}/Release/ITKCommon.dll DESTINATION bin)
#  INSTALL(FILES ${ITK_LIBRARY_DIRS}/Debug/ITKCommon.dll DESTINATION bin)
#ENDIF(BUILD_SHARED_LIBS)


# CPACK CONFIGURATION
#INCLUDE(InstallRequiredSystemLibraries)

#SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "ShapeWorksStudio Research Sandbox")
#SET(CPACK_PACKAGE_VENDOR "CARMA Center Image Processing Division")
#SET(CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_CURRENT_SOURCE_DIR}/PackageDescription.txt")
#SET(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/Copyright.txt")
#SET(CPACK_PACKAGE_VERSION_MAJOR "0")
#SET(CPACK_PACKAGE_VERSION_MINOR "1")
#SET(CPACK_PACKAGE_VERSION_PATCH "0")
#SET(CPACK_PACKAGE_INSTALL_DIRECTORY "ShapeWorksStudio ${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PA#CKAGE_VERSION_PATCH}")
#IF(WIN32 AND NOT UNIX)
#  # There is a bug in NSI that does not handle full unix paths properly. Make
#  # sure there is at least one set of four (4) backlashes.
#  #  SET(CPACK_PACKAGE_ICON "${CMake_SOURCE_DIR}/Utilities/Release\\\\InstallIcon.bmp")
#  #  SET(CPACK_NSIS_INSTALLED_ICON_NAME "bin\\\\MyExecutable.exe")
#  SET(CPACK_NSIS_DISPLAY_NAME "${CPACK_PACKAGE_INSTALL_DIRECTORY} ShapeWorksStudio Research Sandbox")
#  #  SET(CPACK_NSIS_HELP_LINK "http:\\\\\\\\www.my-project-home-page.org")
#  #  SET(CPACK_NSIS_URL_INFO_ABOUT "http:\\\\\\\\www.my-personal-home-page.com")
#  #  SET(CPACK_NSIS_CONTACT "me@my-personal-home-page.com")
#  SET(CPACK_NSIS_MODIFY_PATH ON)
#ELSE(WIN32 AND NOT UNIX)
#  #  SET(CPACK_STRIP_FILES "bin/MyExecutable")
#    SET(CPACK_SOURCE_STRIP_FILES "")
#ENDIF(WIN32 AND NOT UNIX)

#SET(CPACK_PACKAGE_EXECUTABLES )
#INCLUDE(CPack)
